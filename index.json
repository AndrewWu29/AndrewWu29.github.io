[{"content":"Cloudflare, Inc. is an American content delivery network and DDoS mitigation company. It acts as a reverse proxy between a website\u0026rsquo;s visitor and the Cloudflare customer\u0026rsquo;s hosting provider.\nAfter bought a domain name, usally I will need a domain name provider to protect our domain.\nI recommended to use Cloudflare to protect you domain, they provide free CDN, Cache and DDoS mitigation etc.\nBut they don\u0026rsquo;t charge you for these services.\nWe can follow below steps to use Cloudflare to manage your DNS.\nStep 1: Sign up a Cloudflare account Step 2: Add a Site in Cloudflare  Logged in Cloudflare In Websites Home page press \u0026lsquo;Add a Site\u0026rsquo; Fill in you bought domain name Choose Cloudflare free plan Press confirm button  Step 3: Setting Cloudflare DNS  Press your added site Go to DNS page Fill in your domain name in Search DNS records field Press Search button It will automatically copy your DNS settings from Google Domains Check the DNS records are corrected then save them  Step 4: Cloudflare Name Server Setting  Copy Cloudflare gave name server 1 \u0026amp; 2 Back to Google Domains your domain \u0026gt; DNS Add NAMESERVERS to Custom DNS Fill in NameServer 1 \u0026amp; 2 Confirm Settings  Step 5: Back to Cloudflare to check settings status  Ensure your settings are working now  ","permalink":"https://andrewu.page/2022/04/how-to-setup-cloudflare-with-google-domains/","summary":"Cloudflare, Inc. is an American content delivery network and DDoS mitigation company. It acts as a reverse proxy between a website\u0026rsquo;s visitor and the Cloudflare customer\u0026rsquo;s hosting provider.\nAfter bought a domain name, usally I will need a domain name provider to protect our domain.\nI recommended to use Cloudflare to protect you domain, they provide free CDN, Cache and DDoS mitigation etc.\nBut they don\u0026rsquo;t charge you for these services.","title":"How to setup Cloudflare with Google domains"},{"content":"GitHub Pages is easy to setup your owm blog with Hugo or another frameworks, but to a custom domain with Google Domains, you may run into some problems.\nHere is how you can do it in below steps:\nStep 1: Let GitHub Pages know your custom domain  Go to your github repo settings page. Add you custom domain name at Settings \u0026gt; GitHub Pages \u0026gt; Custom domain.  Step 2: Go to your domain provider points your domain to GitHub Pages  Go to registar page on your google domains, select your domain. Go to DNS \u0026gt; Custom resource records. Add the record shown in the screenshot bellow. Note that you need to use the \u0026ldquo;+\u0026rdquo; button to add more urls.  Here is the list of ips in the screenshot: 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153\nStep 3: Let your www sub-domain point to your GitHub Pages  Add the following CNAME record. Add a CNAME file, it contents your domain in your Hugo static folder.  Step 4: Enable HTTPS for your GitHub Pages  Go to your github repository settings page, under Settings \u0026gt; GitHub Pages \u0026gt; Custom domain(remove and add it back and save again) \u0026gt; Check Enforce HTTPS checkbox.  ","permalink":"https://andrewu.page/2022/04/how-to-setup-google-domains-for-github-pages/","summary":"GitHub Pages is easy to setup your owm blog with Hugo or another frameworks, but to a custom domain with Google Domains, you may run into some problems.\nHere is how you can do it in below steps:\nStep 1: Let GitHub Pages know your custom domain  Go to your github repo settings page. Add you custom domain name at Settings \u0026gt; GitHub Pages \u0026gt; Custom domain.  Step 2: Go to your domain provider points your domain to GitHub Pages  Go to registar page on your google domains, select your domain.","title":"How to setup Google domains for GitHub Pages"},{"content":"First you have to check your java version to make sure your version is 1.8.0_xxx.\nYou can use the command below to check your java version:\njava -version  After go to download swt, the version has to be 4.20(it works for me).\nWhen downloaded swt 4.20, open the folder, and we have to rename the file swt.jar to swt2.jar.\nOpen your your android sdk path: /Users/\u0026lt;USERNAME\u0026gt;/Library/Android/sdk/tools/lib, cd to x86 and x86_64 folder, then copy the swt2.jar file and paste to these two folders.\nFinally you can reopen a new terminal and type uiautomatorviewer to open your UIAutomatorViewer to located your elements on the physical devices or emulator devices\n","permalink":"https://andrewu.page/2022/04/how-to-fix-broken-gui-of-uiautomatorviewer-on-mac-os/","summary":"First you have to check your java version to make sure your version is 1.8.0_xxx.\nYou can use the command below to check your java version:\njava -version  After go to download swt, the version has to be 4.20(it works for me).\nWhen downloaded swt 4.20, open the folder, and we have to rename the file swt.jar to swt2.jar.\nOpen your your android sdk path: /Users/\u0026lt;USERNAME\u0026gt;/Library/Android/sdk/tools/lib, cd to x86 and x86_64 folder, then copy the swt2.","title":"How to fix broken GUI of UIAutomatorViewer on Mac OS?"},{"content":"You have to install Xcode first.\nOpen a terminal and verify Python and pip installation.\nWe can use this to check our python on Mac OS\nwhich python # to check python2 which python3 # to check python3  Then use the pip3 list to check our installed list.\nAnd then, we use pip3 to install the robot framework.\npip3 install robotframework  Run pip3 list to check robotframwork is in our list.\nAfter running the robot —version to check that the installation was successful.\nNow that the robot framework has been installed; we can install robotframework-appiumlibrary, use pip3.\npip3 install robotframework-appiumlibrary  Install Java JDK from the Oracle website to download the version that suits your Mac OS\nInstall Android Studio from the site to download the version that suits your Mac OS\nAnd install homebrew and use the command from their home page as below command:\n/bin/bash -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026quot;  After homebrew is installed, we can use homebrew to install node and appium, use commands:\nbrew install node brew install appium  Open Android SDK manager, go to Android SDK to install SDK tools, we will install as below list:\n Android SDK Build-Tools Android SDK Command-line Tools Android Emulator Android SDK Platform-Tools Google Play services Android SDK Tools  Checked what we will want to install, then press the Apply button to download these tools.\nNow we can write our path file to .zsh_profile for JAVA_HOME and ANDROID_HOME, the file content would be like this:\n# JAVA export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_321.jdk/Contents/Home export PATH=$JAVA_HOME/bin:$PATH # ANDROID export ANDROID_HOME=/Users/username/Library/Android/sdk export PATH=$ANDROID_HOME/platform-tools:$PATH export PATH=$ANDROID_HOME/tools:$PATH export PATH=$ANDROID_HOME/tools/bin:$PATH export PATH=$ANDROID_HOME/emulator:$PATH  After we saved this file, we have to type source .zsh_profile to execute commands from this file.\nThen we can type the below commands to check our installations.\njava -version node —version npm -version appium -v adb —version  If the above commands show well, we can install the appium-doctor to check our environment is correct for appium, use npm to install it, the command is:\nnpm install appium-doctor -g  After installation of appium-doctor, you can run this command to check your environment.\nappium-doctor  If any necessary dependencies are installed, means your environment is done now, Congratulations！\n","permalink":"https://andrewu.page/2022/04/install-robot-framework-and-appium-on-mac-os/","summary":"You have to install Xcode first.\nOpen a terminal and verify Python and pip installation.\nWe can use this to check our python on Mac OS\nwhich python # to check python2 which python3 # to check python3  Then use the pip3 list to check our installed list.\nAnd then, we use pip3 to install the robot framework.\npip3 install robotframework  Run pip3 list to check robotframwork is in our list.","title":"Install Robot Framework and Appium on Mac OS?"},{"content":"For Robot Framework and Appium environment on Windows, we should install softwares list below:\n Robot Framework node JDK Android Studio Appium Appium Desktop appium-doctor  First of all we have to install Java JDK for me I will need the Windows 64 bit. Java Downloads JDK And we chose the x64 Installer for our environment.\nThe installation is very simple we just press next, next and finish, then we can go to setting our environment.\nWe have to create a new system variable as below:\nVariable name: JAVE_HOME Variable value: C:\\Program Files\\Java\\jdk-18 # base on you jdk path  After Java JDK installed, we need to install our Android Studio. Android Studio Then downloaded Android Studio, we used the default settings and finished our installation.\nAnd open our Android Studio and go to SDK Manager to download our Android SDK, then go to setting our environment too.\nCreate a new user variable as below:\nVariable name: ANDROID_HOME Variable value: C:\\Users\\username\\AppData\\Local\\Android\\Sdk # you can find in SDK Manager page  Then edit Path variable in user variables and add new variables as below: %ANDROID_HOME%\\tools %ANDROID_HOME%\\build-tools %ANDROID_HOME%\\emulator %ANDROID_HOME%\\tools\\bin\nFinished Android Studio installation, we can install our node now. node download During the installation we have to make sure at Custom Setup section has \u0026ldquo;Add to PATH\u0026rdquo; below.\nNow we installed node, we can go to download our Appium now.\nBecause we alraedy installed node, we can open our cmd and type below commands to check our node and npm versions:\nnode -v npm -v  Make sure they show you your installed version number, then we can use npm to install our Appium.\nThe Appium install command likes below: npm install appium -g\nCheck your appium installation, use command as below: appium \u0026ndash;version\nFinally we can use npm to install appium-doctor to check our environment, we use the command below to install: npm intaal -g appium-doctor\nAfter installed appium-doctor, use appium-doctor --version to check your installation was successeful.\nThen we can open a new cmd to check our appium environment, use the command below: appium-doctor\nSometimes we like to use some GUI application, so we also can download Appium Desktop application.\nWe can go to Appium site to download the GUI option.\nIt\u0026rsquo;s easy to install, just press next, next and finish.\nAfter that you can launch your Appium Desktop Application.\nCheck you were installed successful.\nFinally we have to download \u0026ldquo;Robot Framework\u0026rdquo;, you have to download python on you Windows first, after that use pip install robotframework to installing Robot Framework.\nTo check that the installation was successful, run: robot \u0026ndash;version\n","permalink":"https://andrewu.page/2022/04/robot-framework-and-appium-install-environment-on-windows/","summary":"For Robot Framework and Appium environment on Windows, we should install softwares list below:\n Robot Framework node JDK Android Studio Appium Appium Desktop appium-doctor  First of all we have to install Java JDK for me I will need the Windows 64 bit. Java Downloads JDK And we chose the x64 Installer for our environment.\nThe installation is very simple we just press next, next and finish, then we can go to setting our environment.","title":"Robot Framework And Appium Install Environment On Windows"},{"content":"Sometimes you need to write about shortcodes, as I do in Insert raw HTML in Hugo with a simple shortcode, you need to escape these shortcode calls.\nHugo uses the following syntax to escape these delimiters in the a content source file\n{{\u0026lt; escape's_shortcode_name \u0026gt;}} {{% /escape's_shortcode_name %}} ","permalink":"https://andrewu.page/2022/04/how-to-escape-hugo-shortcode/","summary":"Sometimes you need to write about shortcodes, as I do in Insert raw HTML in Hugo with a simple shortcode, you need to escape these shortcode calls.\nHugo uses the following syntax to escape these delimiters in the a content source file\n{{\u0026lt; escape's_shortcode_name \u0026gt;}} {{% /escape's_shortcode_name %}} ","title":"How to escape Hugo shortcode"},{"content":"I love to use Markdown to write my notes to help me learn new things.\nAnd sometimes, if I forget something, I can use my notes to help me remember how to do it.\nBut Markdown in a table or some layouts is not pretty to use, so I have to insert raw HTML to help me create a stunning table or some designs you want.\nWhat a Shortcode is? Hugo loves Markdown because of its simple content format, but there are times when Markdown falls short. Often, content authors are forced to add raw HTML (e.g., video \u0026lt;iframe\u0026gt;’s) to Markdown content. We think this contradicts the beautiful simplicity of Markdown’s syntax.\nHugo created shortcodes to circumvent these limitations.\nHere is how to create your own custom shortcode to make that possible.\nAdd a shortcode template to your site in layouts/shortcodes/rawhtml.html, with the content below:\n\u0026lt;!-- raw html -—\u0026gt; {{.Inner}}  This shortcode template tells Hugo to render the inner content passed to your shortcode directly into the HTML of your site.\nYou can use this shortcode in your .md file, it will like below:\n {{\u0026lt; rawhtml \u0026gt;}} \u0026lt;p class=\u0026#34;speshal-fancy-custom\u0026#34;\u0026gt; This is raw HTML, inside Markdown. \u0026lt;/p\u0026gt; {{\u0026lt; /rawhtml \u0026gt;}} References shortcodes\n","permalink":"https://andrewu.page/2022/04/insert-raw-html-in-hugo-with-a-simple-shortcode/","summary":"I love to use Markdown to write my notes to help me learn new things.\nAnd sometimes, if I forget something, I can use my notes to help me remember how to do it.\nBut Markdown in a table or some layouts is not pretty to use, so I have to insert raw HTML to help me create a stunning table or some designs you want.\nWhat a Shortcode is? Hugo loves Markdown because of its simple content format, but there are times when Markdown falls short.","title":"Insert raw HTML in Hugo with a simple shortcode"},{"content":"What is Vim? Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient. It is included as \u0026ldquo;vi\u0026rdquo; with most UNIX systems and with Apple OS X.\nVim is rock stable and is continuously being developed to become even better. Among its features are:\n persistent, multi-level undo tree extensive plugin system support for hundreds of programming languages and file formats powerful search and replace integrates with many tools  BASIC Vim modes Vim supports multiple modes. This section discusses some of the important modes which will be used on day-to-day basis.\nCommand mode This is the default mode in which Vim starts. We can enter editor commands in this mode. We can use variety of commands in this mode like copy, paste, delete, replace and many more. We’ll discuss these commands in later sections.\nInsert mode You can use this mode to enter/edit text. To switch from default command to insert mode press i key. It will show current mode in bottom left corner of editor.\nUse Escape key to switch back to command mode from this mode.\nWe can enter any text once we are in insert mode. Below image shows this.\nCommand line mode This mode is also used to enter commands. Commands in this mode starts with colon(:). For instance, in previous section quit command was entered in this mode. We can go to this mode either from command or insert mode.\n  To switch from command mode to this mode just type colon\n  To switch from insert mode to this mode press Escape and type colon\n  Visual mode In this mode we can visually select text and run commands on selected sections.\n  To switch from command mode to visual mode type v\n  To switch from any other mode to visual mode first switch back to command mode by pressing Escape, then type v to switch to visual mode\n  In below image bottom left corner shows visual mode.\nCreate new file Perform below steps to create and save new file −\n  Execute following command to open Vim\n$ vim\n  Type following command in Vim\n:edit message.txt\n  It will reload file if, it exist already\n  Switch to insert mode\ni\n  Enter some text\n  Switch back to command mode\nEsc\n  Save changes to file\n:w\n  Now message.txt file will be created.\n  Quit Vim\n:q\n  Open file in read-only mode Use –R option to open file in read-only mode\n`$ vim -R message.txt`  Edit existing file Perform below steps to edit existing file −\n  Open file using Vim\n$ vim message.txt\n  Switch to insert mode and enter some text there.\ni\n  Quit editor without saving changes.\n:q!\n  OR\n  Save changes and quit editor using following command.\n:wq\n  Access help manual Help manual is shipped with Vim editor itself and it is really comprehensive. To access help execute below command\n:help  Help on specific topic Help manual will show entire help about Vim. But what if, we are only interested in certain topic. Vim provides command for that as well with following syntax\n:help \u0026lt;topic-name\u0026gt;  In above command replace \u0026lt;topic-name\u0026gt; with topic in which you are interested. Forinstance to access help about vim mode, execute following command\n:help modes  Search help phrase in manual You can search specific topic only if you know its name. But what if, you don’t know the exact name of help topic. In that case you can use below command\n:helpgrep \u0026lt;phrase\u0026gt;  For instance, to access help about navigation in Vim execute below command\n:helpgrep navigation  Vim provides many commands which make editing functionality really powerful. In this chapter, we will discuss following items −\n Insert Append Open new line Substitute Change Replace Join  Insert text before cursor To insert text before cursor perform following steps −\n To insert text before cursor perform following steps Switch to insert mode i  Insert text at the beginning of line Let us suppose you are in the middle of line and you want to insert text at the beginning of current line then perform following steps\n Switch to command mode Esc Activate insert mode I  This action will move cursor to the beginning of current line and switch Vim in insert mode\nAppend text after cursor To append text after cursor perform following steps\n Switch to command mode and move cursor to appropriate position Esc Switch to insert mode a This action will move cursor next by one position and switch Vim in insert mode.  Append text at the end of line Let us suppose you are in the middle of line and you want to append text at the end of current line then perform following steps\n Switch to command mode Esc Switch to insert mode A  This action will move cursor to the end of line and switch Vim in insert mode\nOpen new line below cursor Let us suppose you are in the middle of line and you want to open new line below current line then perform following steps\n Switch to command mode Esc Switch to insert mode o This action will insert blank line below current line and switch Vim in insert mode  Open new line above cursor Let us suppose you are in the middle of line and you want to open new line above current line then perform following steps\nSwitch to command mode Esc Switch to insert mode o This action will insert blank line above current line and switch Vim in insert mode\nSubstitute text Let us suppose you want to substitute single character then perform following steps\n  Switch to command mode Esc\n  Move cursor to appropriate position\n  Switch to insert mode s This action will delete character under cursor and switch Vim in insert mode To substitute entire line use\ns This action will delete entire line and switch Vim in insert mode.\n  Change text Let us suppose you want to change text in current line then perform following steps\n Switch to command mode Esc Execute following command cc This is similar to substitute action using S  To change text from current cursor position, execute following command\nC  This action will delete text after current cursor position and switch Vim in insert mode.\nReplace text To replace single character perform following steps\n  Switch to command mode Esc\n  Move cursor to appropriate position\n  Execute following command r\n  Enter character to be substituted. Note that this command will not switch Vim in insert mode\n  To replace entire line execute\nR  Join text To join two lines perform following steps\n Switch to command mode Esc Move cursor to appropriate line Execute following command J  Basic navigation In basic navigation we can navigate to left, right, up and down by position. Below commands can be used for this\n   Sr.No Command \u0026amp; Description     1 h Move cursor to left by one position   2 l Move cursor to right by one position   3 k Move cursor to upward direction by one line   4 j Move cursor to downward direction by one line    To perform multi-position navigation use number with these commands. For instance to navigate cursor 10 line below from current line, execute following command\n10j  You can use numbers with remaining commands as well.\nIn addition to this, below commands also perform some useful navigation.\n   Sr.No Command \u0026amp; Description     1 0 Move cursor to the beginning of current line   2 $ Move cursor to the end of current line   3 Ctrl + f Scroll down entire page   4 Ctrl + b Scroll up entire page    Navigate to lines Below command can be used to navigate to specific line −\n   Sr.No Command \u0026amp; Description     1 :n Jump to the nth line   2 :0 Jump to the start of file   3 :$ Jump to the end of file    Word navigation We can use following commands for word navigation\n   Sr.No Command \u0026amp; Description     1 w Move cursor to the beginning of the next word   2 e Move cursor to the end of the current word   3 b Move cursor to the beginning of the previous word    Using jumps Vim keeps track of your navigation using a jump list. You can go backward and forward through that list.\nThe jump list keeps tracks of all the places you’ve been to by tracking file name, line number and column number.\nTo view jump list execute following command\n:jumps  Following command are based on jump list\n   Sr.No Command \u0026amp; Description     1 Ctrl + o Jump back to the previous position   2 Ctrl + i Jump to the next position    ADVANCE We have seen basic editing earlier. Let us understand some other editing features of Vim. In this section, we will discuss following items\n Buffer Swap files Cut, copy, delete, paste actions Undo and redo actions  Buffer Buffer is temporary memory used by Vim. When we open a file in editor, Vim loads its contents from disk drive. These contents are stored in memory (RAM) whenever we edit a file we are actually editing file from buffer. Once we finish editing and save file that time only buffer contents are transferred to appropriate file.\nSwap Swap area is a file created by Vim to store buffer contents periodically. While editing file our changes may be lost because of any reasons and Vim provides swap files to provide data recovery.\nTo get actual name of swap file execute following command\n:swapname  Cut, Copy and paste actions We often perform cut, copy and paste actions on text. Vim provides following commands to perform these actions (y stands for yank and p stands for paste action)\n   Sr.No Command \u0026amp; Description     1 x Delete character from cursor position   2 X Delete previous character from cursor position   3 y Copy single character from cursor position   4 p Paste character after cursor position   5 P Paste character before cursor position    Multi-position command We can use cut, copy and paste commands with words and sentences as well. Below table shows this\n   Sr.No Command \u0026amp; Description     1 dw Delete word from cursor position   2 D Delete entire line from cursor position   3 dd Delete entire line   4 Y Copies entire line   5 yy Copies entire line    To perform multi-line/multi-word actions just use numbers with command. You can use this syntax with other commands as well. For instance, to delete 3 words use\n3dw  Undo We can undo single or multiple actions. To perform one time undo action execute\nu  To perform multiple undo action, use number with same command. For instance, below command will undo last 3 actions\n3u  In addition to this, to undo all execute following command\nU  Redo Redo is apposite action of undo. Execute any of the command to perform redo action.\nCtrl + r OR : red  Search related settings To perform incremental search execute following command\n:set incsearch  To highlight search execute following command\n:set hlsearch  To disable incremental and highlighted search execute following commands\n:set noincsearch :set nohlsearch  Search in current file Search in forward direction Use following commands to perform search in forward direction −\n   Sr.No Command \u0026amp; Description     1 /\u0026lt;expression\u0026gt; Search expression in forward direction   2 n Find next occurrence. This is same and find next   3 N Find previous occurrence. This is same as find previous   4 // Repeat previous forward search    Search in backward direction Use following commands to perform search in backward direction\n   Sr.No Command \u0026amp; Description     1 ?\u0026lt;expression\u0026gt; Search expression in backward direction   2 n Find previous occurrence. This is same and find previous   3 N Find next occurrence. This is same as find next   4 ?? Repeat previous backward search    Search word under cursor Place cursor under any word and execute following commands to perform search operation\n   Sr.No Command \u0026amp; Description     1 * Search next occurrence of current word   2 # Search previous occurrence of current word    Search in multiple files Using vimgrep command we can search \u0026lt;expression\u0026gt; in multiple files. For instance below command searches string - Jarvis in all text files.\n:vimgrep Jarvis *.txt  Note that to go to next and previous occurrence we have to use following commands\n   Sr.No Command \u0026amp; Description     1 :cn Go to next occurrence of expression   2 :cN Go to previous occurrence of expression    References vim_quick_guide\n","permalink":"https://andrewu.page/2022/03/vim-note/","summary":"What is Vim? Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient. It is included as \u0026ldquo;vi\u0026rdquo; with most UNIX systems and with Apple OS X.\nVim is rock stable and is continuously being developed to become even better. Among its features are:\n persistent, multi-level undo tree extensive plugin system support for hundreds of programming languages and file formats powerful search and replace integrates with many tools  BASIC Vim modes Vim supports multiple modes.","title":"Vim note"},{"content":"What is Markdown? Markdown is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form. Markdown is widely used in blogging, instant messaging, online forums, collaborative software, documentation pages, and readme files. from Wikipedia.\nPHILOSOPHY\nMarkdown is intended to be as easy-to-read and easy-to-write as is feasible.\nSo when you are familiar with Markdown syntax, You can easily and quickly write notes, articles and documentation etc\u0026hellip;\nBASIC SYNTAX HEADERS # This is an H1 ## This is an H2 ### This is an H3 #### This is an H4 ##### This is an H5 ###### This is an H6  Result\nThis is an H1 This is an H2 This is an H3 This is an H4 This is an H5 This is an H6 EMPHASIS BOLD **double asterisks** __double underscores__  Result\ndouble asterisks\ndouble underscores\nITALIC *single asterisks* _single underscores_  Result\nsingle asterisks\nsingle underscores\nBOLD ITALIC ***Triple asterisks*** ___Triple underscores___  Result\nTriple asterisks\nTriple underscores\nPARAGRAPHS A paragraph is composed of more than one connected line sentence, and more than one blank line will split into different paragraphs.\nThis is the first paragraph. This is the second paragraph.  LISTS Markdown supports ordered (numbered) and unordered (bulleted) lists.\nUnordered lists use asterisks, pluses, and hyphens — interchangably — as list markers:\nUnordered lists * Red * Orange * Yellen + Red + Orange + Yellen - Red - Orange - Yellen  Result\n Red Orange Yellen   Red Orange Yellen   Red Orange Yellen  Ordered lists use numbers followed by periods: 1. Red 2. Orange 3. Yellen  Result\n Red Orange Yellen  To use a multi-level list, use an indent or two half-spaces on the next level.\n- Red - Orange - Yellen - Sub Red - Sub Orange - three  Result\n Red Orange Yellen  Sub Red Sub Orange  three      CHECKBOX For to-do or confirmation items, use the * [] symbol at the beginning of the item, and an x in brackets means it is selected.\n* [x] This is a complete item * [ ] This is an incomplete item  Result\n This is a complete item This is an incomplete item  HORIZONTAL RULES You can produce a horizontal rule tag (\u0026lt;hr /\u0026gt;) by placing three or more hyphens, asterisks, or underscores on a line by themselves. If you wish, you may use spaces between the hyphens or asterisks. Each of the following lines will produce a horizontal rule:\n*** --- ___ ******** * * * ---------- - - -  Result\n       ADVANCE SYNTAX LINKS  A square bracket to place the link text A parenthesis, place the link path or URL, enclosed in double quotes to add prompt text  [GitHub](https://andrewwu29.github.io \u0026#34;My GitHub\u0026#34;) Result\nGitHub\nIMAGES Admittedly, it’s fairly difficult to devise a “natural” syntax for placing images into a plain text document format.\nMarkdown uses an image syntax that is intended to resemble the syntax for links, allowing for two styles: inline and reference.\nInline image syntax looks like this:\n![Img](/path/image.jpg) ![Img](/path/image.jpg \u0026quot;title\u0026quot;)  Result\ninline reference AUTOMATIC LINKS Markdown supports a shortcut style for creating “automatic” links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:\n\u0026lt;https://andrewwu29.github.io\u0026gt;  Result\nhttps://andrewwu29.github.io\nTABLE Markdown table is a little bit complicated, and the layout is not too beautiful if you want to use it, and try not to make a large table.\n The outer pipe is not required. Left-aligned writing is to add : on the left side, such as :\u0026mdash;, similarly, right-aligned is to add a colon on the right \u0026mdash;: Center alignment is rendered by adding colons :\u0026ndash;: on both sides.  | Plugin | README | | ------ | ------ | | Dropbox | [plugins/dropbox/README.md][PlDb] | | GitHub | [plugins/github/README.md][PlGh] | | Google Drive | [plugins/googledrive/README.md][PlGd] | | OneDrive | [plugins/onedrive/README.md][PlOd] | | Medium | [plugins/medium/README.md][PlMe] | | Google Analytics | [plugins/googleanalytics/README.md][PlGa] | CODE To indicate a span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:\nUse the `printf()` function. ``There is a literal backtick (`) here.`` A single backtick in a code span: `` ` `` A backtick-delimited string in a code span: `` `foo` ``  Result\nUse the printf() function.\nThere is a literal backtick (`) here.\nA single backtick in a code span: `\nA backtick-delimited string in a code span: `foo`\nCODE BLOCKS To produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab. For example, given this input:\nHere is an example of AppleScript: tell application \u0026quot;Foo\u0026quot; beep end tell  Result\nHere is an example of AppleScript:\ntell application \u0026quot;Foo\u0026quot; beep end tell  BACKSLASH ESCAPES Markdown allows you to use backslash escapes to generate literal characters which would otherwise have special meaning in Markdown’s formatting syntax.\nMarkdown provides backslash escapes for the following characters:\n   characters name     \\ backslash   ` backtick   * asterisk   _ underscore   {} curly braces   [] square brackets   () parentheses   # hash mark   + plus sign   - minus sign (hyphen)   . dot   ! exclamation mark    BLOCKQUOTES Markdown uses email-style \u0026gt; characters for blockquoting.\n This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\nDonec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.\n Markdown allows you only put the \u0026gt; before the first line of a hard-wrapped paragraph:\n This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n  Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.\n Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of \u0026gt;:\n This is the first level of quoting.\n This is nested blockquote.\n Back to the first level.\n   Blockquotes can contain other Markdown elements, including headers, lists, and code blocks:\n This is a header.  This is the first list item. This is the second list item.  Here\u0026rsquo;s some example code:\nreturn shell_exec(\u0026quot;echo $input | $markdown_script\u0026quot;);   References Markdown: Syntax\nMarkdown\nMarkdown筆記神器\n","permalink":"https://andrewu.page/2022/02/markdown-basic-systax/","summary":"What is Markdown? Markdown is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form. Markdown is widely used in blogging, instant messaging, online forums, collaborative software, documentation pages, and readme files. from Wikipedia.\nPHILOSOPHY\nMarkdown is intended to be as easy-to-read and easy-to-write as is feasible.","title":"Markdown Basic Systax"},{"content":"York Minster The Cathedral and Metropolitical Church of Saint Peter in York, commonly known as York Minster, is the cathedral of York, North Yorkshire, England, and is one of the largest of its kind in Northern Europe.\nSome of the stained glass in York Minster dates back to the 12th century and much of the glass (white or coloured) came from Germany. The glass was painted, fired, then joined with lead strips (came) into the windows. The 77-foot (23 m) tall and 32-foot (9.8 m) wide Great East Window was created by John Thornton in the early 15th century; he was paid £66 for the work. This is the largest expanse of medieval stained glass in the country, according to the Minster.\nThe Great East Window Some pictures Tickets Information Adult £12.00、Student £9.00、 Child £0.00（0 - 16 Years, only available with an accompanying adult), Tower Trips add on £5.00 (If your are York resident \u0026amp; York Students - proof of address or student ID required £0.00, Tower Trips add on £5.00)\nTransport Information York Minster\nAddress: Deangate, York YO1 7HH\nPhone: 01904 557200\nWebSite: http://yorkminster.org/\nGetting here: https://yorkminster.org/visit/plan-your-visit/#getting-here\nReferences Wikipedia\n","permalink":"https://andrewu.page/2022/02/uk-york-york-minster/","summary":"York Minster The Cathedral and Metropolitical Church of Saint Peter in York, commonly known as York Minster, is the cathedral of York, North Yorkshire, England, and is one of the largest of its kind in Northern Europe.\nSome of the stained glass in York Minster dates back to the 12th century and much of the glass (white or coloured) came from Germany. The glass was painted, fired, then joined with lead strips (came) into the windows.","title":"[UK York] York Minster"},{"content":"SmartPhone: iPhone SE Second Generation I wouldn\u0026rsquo;t say I like a big phone, so for me, I think iPhone SE 2nd Gen it\u0026rsquo;s a perfect size, and during Covid-19, I usually wear a mask when I go out and unlock my phone I don\u0026rsquo;t have to take off my mask. And second-generation Touch ID is a fixed button; I don\u0026rsquo;t worry press it too many, and unlocking my phone is quicker than my iPhone 5S.\nThen the camera, because I don\u0026rsquo;t take photos at night very often and usually I would like to take pictures in daylight, so the camera it\u0026rsquo;s not a big issue for me.\nPhone case: RHINOSHIELD Mod NX I have the habit of using phone cases sometimes protect I dropped my phone by accident, and let me use my phone longer.\nI used some phone case brands, but my personal favourite is RHINOSHIELD Mod NX; I like this modular design. I can change button colours or back pictures and transparent back. I can see through my iPhone back and protect my phone too.\nEarbuds: Sony WF-1000XM4 Bringing noise-cancellation earbuds with you can help you have a peaceful moment in different places. I used to wear my Sony WF-1000XM4 during my commute to the office and home or using in the office to help me focus on my tasks and things or listening podcast, news and music.\nWallet It just helps me store my cash, ID, driver licences, debit card and credit cards.\nPower Bank: IDMIX CH07 It\u0026rsquo;s a great Power Bank; it can be an AC charger to charge your electrical products and build-in USB C and Lighting cables, so you don\u0026rsquo;t have to worry about forgetting your charging cable at home.\nIt almost can juice up my iPhone SE(2nd Gen) three times.\nWatch: Apple Watch Series 5 44mm I like my Apple Watch S5 even I have to charge it every day; it\u0026rsquo;s a smartwatch that can help me records my activities and reminds my schedules, but it still has some cons, like recording my sleeping activities are not very precise for me usually you have bought some sleeping apps to help you.\nI know Apple Watch S6 provides a Blood Oxygen Sensor, and you can use it to measure your Blood Oxygen, but I think only this upgrade is not worth charging.\nWatch Case: RHINOSHIELD CrashGuard NX I used an Apple Watch case to prevent scratching my apple watch, and I can use it longer.\n","permalink":"https://andrewu.page/2022/02/my-tech-edc-essentials-minimum-2022/","summary":"SmartPhone: iPhone SE Second Generation I wouldn\u0026rsquo;t say I like a big phone, so for me, I think iPhone SE 2nd Gen it\u0026rsquo;s a perfect size, and during Covid-19, I usually wear a mask when I go out and unlock my phone I don\u0026rsquo;t have to take off my mask. And second-generation Touch ID is a fixed button; I don\u0026rsquo;t worry press it too many, and unlocking my phone is quicker than my iPhone 5S.","title":"My Tech EDC Essentials Minimum 2022?"},{"content":"Hugo is a popular static site generator, and PaperMod comes with a default RSS 2.0 template.\nWhat is an RSS feed? RSS stands for Really Simple Syndication, and it’s is a simple, standardized content distribution method that can help you stay up-to-date with your favorite newscasts, blogs, websites, and social media channels.\nMeans supported an RSS feed function on your blog, can keep those who follow you up-to-date with your newest posts.\nAdd an RSS feed on your Hugo PaperMod theme only three steps Step 1: Ensure RSS is listed as an output format inside your config.yml file Step 2: Add an RSS feed icon on your site Step 3: Enable full content support generated RSS XML file So your config.yml file must include as below code:\nparams: ShowFullTextinRSS: true # Supports to show your whole contents in RSS, not just summary socialIcons: - name: rss # Shows an RSS feed icon on your site` url: \u0026#34;index.xml\u0026#34; # Your RSS feed url path outputs: home: - HTML - RSS # Supports your site output including RSS format - JSON After finishing the above steps, now your Hugo PaperMod theme site can support an RSS feed.\nReferences Setting up an RSS feed for a Hugo blog using the PaperMod Theme\n","permalink":"https://andrewu.page/2022/02/how-to-add-an-rss-feed-to-your-hugo-papermod-theme/","summary":"Hugo is a popular static site generator, and PaperMod comes with a default RSS 2.0 template.\nWhat is an RSS feed? RSS stands for Really Simple Syndication, and it’s is a simple, standardized content distribution method that can help you stay up-to-date with your favorite newscasts, blogs, websites, and social media channels.\nMeans supported an RSS feed function on your blog, can keep those who follow you up-to-date with your newest posts.","title":"How to add an RSS feed to your Hugo PaperMod theme?"},{"content":"What is Disqus? The internet\u0026rsquo;s favorite comment plug-in makes it easy for publishers to bring their content to life, fuel colorful discussions, efficiently moderate comments, and build engaged communities.\nStep by step to integrate Disqus into your Hugo Site Step 1: Sign up for Disqus Step 2: Install Disqus Step 3: Chose \u0026ldquo;I want to install Disqus on my site.\u0026rdquo; Step 4: Fill in the Form details for your Hugo site Step 5: Copy the discussion templates, and create a disqus.html file under your Hugo site folder layouts/partials, then paste it inside the file The template will be like below:\n\u0026lt;div id=\u0026#34;disqus_thread\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page\u0026#39;s canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page\u0026#39;s unique identifier variable }; */ (function() { // DON\u0026#39;T EDIT BELOW THIS LINE // Don\u0026#39;t ever inject Disqus on localhost--it creates unwanted // discussions from \u0026#39;localhost:1313\u0026#39; on your Disqus account... if (window.location.hostname == \u0026#34;localhost\u0026#34;) return; var d = document, s = d.createElement(\u0026#39;script\u0026#39;); s.src = \u0026#39;https://your_disqus_name.disqus.com/embed.js\u0026#39;; s.setAttribute(\u0026#39;data-timestamp\u0026#39;, +new Date()); (d.head || d.body).appendChild(s); })(); \u0026lt;/script\u0026gt; \u0026lt;noscript\u0026gt;Please enable JavaScript to view the \u0026lt;a href=\u0026#34;https://disqus.com/?ref_noscript\u0026#34;\u0026gt;comments powered by Disqus.\u0026lt;/a\u0026gt;\u0026lt;/noscript\u0026gt; Step 6: Create a comments.html file under your Hugo site folder layouts/partials, and copy and paste the below code inside the file {{- /* Comments area start */ -}} {{- /* partial \u0026#34;disqus.html\u0026#34; . */ -}} {{ template \u0026#34;_internal/disqus.html\u0026#34; . }} {{- /* to add comments read =\u0026gt; https://gohugo.io/content-management/comments/ */ -}} {{- /* Comments area end */ -}} Step 7: Add Disqus shortname disqusShortname = \u0026quot;\u0026lt;your-disqus-shortname\u0026gt;\u0026quot; in your config.yml file Step 8: Congratulations, now it is all done. You can push it to your GitHub repo References Disqus\nInternal Templates | Hugo\n","permalink":"https://andrewu.page/2022/02/how-to-integrate-disqus-into-your-hugo-site/","summary":"What is Disqus? The internet\u0026rsquo;s favorite comment plug-in makes it easy for publishers to bring their content to life, fuel colorful discussions, efficiently moderate comments, and build engaged communities.\nStep by step to integrate Disqus into your Hugo Site Step 1: Sign up for Disqus Step 2: Install Disqus Step 3: Chose \u0026ldquo;I want to install Disqus on my site.\u0026rdquo; Step 4: Fill in the Form details for your Hugo site Step 5: Copy the discussion templates, and create a disqus.","title":"How to integrate Disqus into your Hugo site?"},{"content":"What is Google Analytics? Google Analytics is a web analytics service that provides statistics and basic analytical tools for search engine optimization (SEO) and marketing purposes. The service is part of the Google Marketing Platform and is available for free to anyone with a Google account.\nHow to add google analytics to Hugo site? Step 1: Create a google account Step 2: Go to google analytics site Step 3: Set up your site details in google analytics Step 4: Get your site google analytics ID Step 5: Set up your Hugo config.yml Add googleAnalytics: G-MEASUREMENT_ID in your config.yml file.\nStep 6: Add google analytics template in your Hugo theme Add {{ template \u0026quot;_internal/google_analytics.html\u0026quot; . }} in your theme’s head.html file \u0026lt;head\u0026gt; section\nReferences DEFINITION Google Analytics\nGoogle Analytics\nInternal Templates | Hugo\n","permalink":"https://andrewu.page/2022/02/how-to-add-google-analytics-to-hugo/","summary":"What is Google Analytics? Google Analytics is a web analytics service that provides statistics and basic analytical tools for search engine optimization (SEO) and marketing purposes. The service is part of the Google Marketing Platform and is available for free to anyone with a Google account.\nHow to add google analytics to Hugo site? Step 1: Create a google account Step 2: Go to google analytics site Step 3: Set up your site details in google analytics Step 4: Get your site google analytics ID Step 5: Set up your Hugo config.","title":"How to add Google Analytics to Hugo?"},{"content":"Checks your Git version git --version Settings your Git user name \u0026amp; email git config --global user.name \u0026#34;Andrew_Wu\u0026#34; git config --global user.email \u0026#34;user@gmail.com\u0026#34; Checks your configurations git config --list Get Help git help \u0026lt;command\u0026gt; #get help for a git command Creates a new git repo git init # create a new git repo, with data stored in the `.git` directory Shows current repo status git status #tells you what\u0026#39;s going on Adds files to stage git add \u0026lt;filename\u0026gt; #adds seleted filename to stagin area git add . #add all files to staging area Creates a new commit git commit git commit -m \u0026#34;commit message\u0026#34; #-m means Message Shows a log git log #shows a flattened log of history git log --all --graph --decorate #visualizes history as a DAG Show changes git diff \u0026lt;filename\u0026gt; #show changes you made relative to the staging area git diff \u0026lt;revision\u0026gt; \u0026lt;filename\u0026gt; #shows differences in a file between snapshots Branch git checkout \u0026lt;revision\u0026gt; #updates HEAD and current branch git branch #shows branches git branch \u0026lt;name\u0026gt; #creates a branch git branch -d \u0026lt;name\u0026gt; #deleted a branch git checkout -b \u0026lt;name\u0026gt; #creates a branch and switches to it same as git branch \u0026lt;name\u0026gt;; git checkout \u0026lt;name\u0026gt; Merge git merge \u0026lt;revision\u0026gt; #merges into current branch git mergetool #use a fancy tool to help resolve merge conflicts git rebase #rebase set of patches onto a new base git rebase -i HEAD~3 #modify history commit records Remote git remote #list remotes git remote add \u0026lt;name\u0026gt; \u0026lt;url\u0026gt; #add a remote git push \u0026lt;remote\u0026gt; \u0026lt;local branch\u0026gt;:\u0026lt;remote branch\u0026gt; #send objects to reomote, and update reomte reference git branch --set-upstream-to=\u0026lt;remote\u0026gt;/\u0026lt;remote branch\u0026gt; #set up correspondence between local and remote branch git fetch #retrieve objects/references from a remote git pull #Sync local and remote repos，same as git fetch; git merge git clone #download repository form remote Undo git commit --amend #edit a commit\u0026#39;s contents/message git reset HEAD \u0026lt;file\u0026gt; #unstage a file git checkout -- \u0026lt;file\u0026gt; #discard changes Advance git clown --depth=1 #shallow clone, without entire version history git add -p #interactive staging git blame #show who last edited which line git stash #temporarily remove modifications to working directory git bisect #binary search history (e.g. for regressions) .gitignore #specify intentionally untracked files to ignore References Version Control (Git)\nGit 與 Github 版本控制基本指令與操作入門教學\nGit教學 初心者懶人包 Git 入門\n","permalink":"https://andrewu.page/2022/01/git-basic-commands/","summary":"Checks your Git version git --version Settings your Git user name \u0026amp; email git config --global user.name \u0026#34;Andrew_Wu\u0026#34; git config --global user.email \u0026#34;user@gmail.com\u0026#34; Checks your configurations git config --list Get Help git help \u0026lt;command\u0026gt; #get help for a git command Creates a new git repo git init # create a new git repo, with data stored in the `.git` directory Shows current repo status git status #tells you what\u0026#39;s going on Adds files to stage git add \u0026lt;filename\u0026gt; #adds seleted filename to stagin area git add .","title":"Git Basic Commands"},{"content":"Step by step, teach you to create a static Blog, and deploy it to GitHub! Preface I recently had a thought to create my blog, and I used many blog services but ended up with nothing. And this time I made a decision, I want to write something, so after googling, I found \u0026ldquo;Hugo\u0026rdquo; this framework, you can use Markdown to create a static blog site. by the way, I don\u0026rsquo;t want to spend too much time creating a dynamic blog site to keep my thoughts and notes. For me this solution, you can use the free GitHub service to be your site host or pay some money to be a private repository and you can show your site too.\nIf you want to create your blog and you have budget concerns, you might consider using Hugo to deploy your blog site.\nPreparations First of all, we have to install Git to handle our stuff and deploy it to Git public repository, and then we need software to help us write Markdown files. (e.g.: Visual Studio Code with Markdown extension)\nGit install \u0026amp; check First, we can go to Git official site to Windows. Download for Windows follow your system bit to download a related version, that double clicks mouse left button, then press \u0026ldquo;Next\u0026rdquo; to \u0026ldquo;Install\u0026rdquo;, and you can finish the installation. After installation, we can use the Windows shortcuts \u0026ldquo;Win key + S key\u0026rdquo;, and type \u0026ldquo;CMD\u0026rdquo; to open Terminal. And then type command as below.\n git version you can get it as below.\ngit version 2.xx.x.windows.x When we can query our git version, means we finished our git installation. And then we need to install Visual Studio Code, it\u0026rsquo;s a free IDE, and we have to install an extension to handle Markdown.\nVisual Studio Code \u0026amp; Markdown extension install Same we go to Visual Studio Code site to download the install file and start to install, same \u0026ldquo;Next\u0026rdquo; to \u0026ldquo;Install\u0026rdquo;. Installed and open it, you will see as below. Then we go to \u0026ldquo;View\u0026rdquo; -\u0026gt; \u0026ldquo;Extensions\u0026rdquo;(Also can use shortcuts Ctrl+Shift+X) to search \u0026ldquo;Markdown\u0026rdquo; Extensions, to find \u0026ldquo;markdownlint\u0026rdquo; and install it. Now, we have already installed Git \u0026amp; Visual Studio Code w/ markdownlint Extension.\nafter we have to install Hugo and create our blog\u0026rsquo;s first post.\nHugo install and create our site Before installing Hugo we have to install chocolatey this tool, here we use \u0026ldquo;Individual\u0026rdquo; with Administrative\u0026rsquo;s PowerShell and use the below command to install.\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) Installed chocolatey this tool, we can start to build our blog site.\nStep 1: Install Hugo We follow quick startedto install Hugo. This time we use the normal version, so follow the manual to use the below command to install it.\nchoco install hugo -confirm After installing Hugo, we have to check are we installed success, we can use the command below.\nhugo version Step 2: Create a site After we need to create our site, we will use yml format, so we use the command below.\nhugo new site \u0026lt;folder name\u0026gt; -f yml When you see as below, means created successfully. Step 3: Add Hugoe theme Finished Hugo site build, we have to add a theme for Hugo to make your site not look like too simple. We can go to Hugo Themes to pick up a theme for yourself.\nI will use PaperMod for this demo.\nFirst of all, we have to switch our path to our folder name, and we can go in terminal to type \u0026ldquo;CD \u0026rdquo;, and our created folder name is \u0026ldquo;its_demo_blog\u0026rdquo;, so we can type command as below.\ncd \u0026lt;Your folder name\u0026gt; Then we have to in this folder to create a new Git repo to use the command below.\ngit init The result will like below. After we need to add our theme to our site folder to create \u0026ldquo;themes/PaperMod\u0026rdquo; under the root, we can use the command below.\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod After we will see as below. Then we follow PaperMod\u0026rsquo;s Official Manual, to modify our config.yml.\nbaseURL: \u0026#34;\u0026lt;username.github.io\u0026gt;\u0026#34; #GitHub repo URL title: its demo blog #site title paginate: 5 # Default Language setting defaultContentLanguage: zh-tw # Theme setting theme: PaperMod #this time we use PaperMod enableRobotsTXT: true buildDrafts: false buildFuture: false buildExpired: false # GooleAnalytics servies googleAnalytics: UA-123-45 # URL link setting permalinks: posts: /:year/:month/:title/ minify: disableXML: true minifyOutput: true params: env: production # to enable google analytics, opengraph, twitter-cards and schema. title: its demo blog description: \u0026#34;its demo blog description\u0026#34; keywords: [Blog, Portfolio, PaperMod] author: Me # author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authors images: [\u0026#34;\u0026lt;link or path of image for opengraph, twitter-cards\u0026gt;\u0026#34;] DateFormat: \u0026#34;January 2, 2006\u0026#34; defaultTheme: auto # dark, light disableThemeToggle: false ShowReadingTime: true ShowShareButtons: true ShowPostNavLinks: true ShowBreadCrumbs: true ShowCodeCopyButtons: false disableSpecial1stPost: false disableScrollToTop: false comments: false hidemeta: false hideSummary: false showtoc: false tocopen: false assets: # disableHLJS: true # to disable highlight.js # disableFingerprinting: true favicon: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; favicon16x16: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; favicon32x32: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; apple_touch_icon: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; safari_pinned_tab: \u0026#34;\u0026lt;link / abs url\u0026gt;\u0026#34; label: text: \u0026#34;its demo blog\u0026#34; #icon: /apple-touch-icon.png iconHeight: 35 # profile-mode profileMode: enabled: false # needs to be explicitly set title: ExampleSite subtitle: \u0026#34;This is subtitle\u0026#34; imageUrl: \u0026#34;\u0026lt;img location\u0026gt;\u0026#34; imageWidth: 120 imageHeight: 120 imageTitle: my image buttons: - name: Posts url: posts - name: Tags url: tags # home-info mode this time we use Home-info mode, also it\u0026#39;s default setting homeInfoParams: Title: \u0026#34;Hi All \\U0001F44B\u0026#34; Content: Welcome to my blog. # You can put your social site links socialIcons: - name: twitter url: \u0026#34;https://twitter.com/\u0026#34; - name: stackoverflow url: \u0026#34;https://stackoverflow.com\u0026#34; - name: github url: \u0026#34;https://github.com/\u0026#34; analytics: google: SiteVerificationTag: \u0026#34;XYZabc\u0026#34; bing: SiteVerificationTag: \u0026#34;XYZabc\u0026#34; yandex: SiteVerificationTag: \u0026#34;XYZabc\u0026#34; cover: hidden: true # hide everywhere but not in structured data hiddenInList: true # hide on list pages and home hiddenInSingle: true # hide on single page # someone can mention you edit a post #editPost: #URL: \u0026#34;https://github.com/\u0026lt;path_to_repo\u0026gt;/content\u0026#34; #Text: \u0026#34;Suggest Changes\u0026#34; # edit text #appendFilePath: true # to append file path to Edit link # for search # https://fusejs.io/api/options.html fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] menu: main: - identifier: posts name: Posts url: /posts/ weight: 1 - identifier: categories name: Categories url: /categories/ weight: 2 - identifier: tags name: Tags url: /tags/ weight: 3 #- identifier: search # name: Search # url: search # weight: 4 #- identifier: about # name: About # url: about # weight: 5 # Read: https://github.com/adityatelange/hugo-PaperMod/wiki/FAQs#using-hugos-syntax-highlighter-chroma # pygmentsUseClasses: true # markup: # highlight: # # anchorLineNos: true # codeFences: true # guessSyntax: true # lineNos: true # style: monokai After we edited, we in our root folder to open a terminal and type hugo server -D, and then open our browser in search bar type http://localhost:1313/, then will see as the picture below. Step 4: Create a first post After that we need to create our first post, and we need to use a command as below.\nHere we use Hugo to create a new Markdown file under in posts folder, so you can change your Markdown file name to fit as your article name, but this time we use \u0026ldquo;hello_world.md\u0026rdquo; for teaching.\nhugo new posts/hello_world.md Then we open our Visual Studio Code to edit our first post, when we open \u0026ldquo;content/posts/hello_world.md\u0026rdquo;. You will see your screen likes below. We edited like below.\n--- title: \u0026#34;Hello_World!\u0026#34; date: 2022-01-06T14:00:09Z draft: false # weight: 1 # aliases: [\u0026#34;/AirTag\u0026#34;] tags: [\u0026#34;First post\u0026#34;, \u0026#34;Hello World\u0026#34;] author: \u0026#34;Me\u0026#34; # author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authors showToc: false TocOpen: false hidemeta: false comments: true #description: \u0026#34;Hello World\u0026#34; #canonicalURL: \u0026#34;https://canonical.url/to/page\u0026#34; disableHLJS: true # to disable highlightjs disableShare: true disableHLJS: false hideSummary: false searchHidden: false ShowReadingTime: true ShowBreadCrumbs: true ShowPostNavLinks: true #cover: # image: \u0026#34;\u0026lt;image path/url\u0026gt;\u0026#34; # image path/url # alt: \u0026#34;\u0026lt;alt text\u0026gt;\u0026#34; # alt text # caption: \u0026#34;\u0026lt;text\u0026gt;\u0026#34; # display caption under cover # relative: true # when using page bundles set this to true # hidden: true # only hide on current single page #editPost: # URL: \u0026#34;https://github.com/\u0026lt;path_to_repo\u0026gt;/content\u0026#34; # Text: \u0026#34;Suggest Changes\u0026#34; # edit text # appendFilePath: false # to append file path to Edit link --- # Hello World!!! This is my first post! Step 5: Open Hugo server Hugo local preview function, we only need to in Windows PowerShell or Terminal and in the site folder root, in command line to type hugo server -D, and we can in local to preview our sites, the initial URL is http://localhost:1313/.\nNow our site will like below. For now we already created a demo blog and posted our first post, and then we need to deploy to GitHub Pages.\nStep 6: Publish Hugo blog to GitHub First of all you have a GitHub account if you don\u0026rsquo;t have yet, you can googling and sign up. We need to in GitHub to create a repository to store our site and named \u0026lt;username\u0026gt;.github.io, the username is your GitHub username.\nPS: Because it\u0026rsquo;s a demo site, so the name is not following the rule. And then we need to in our main repository to create a new branch gh-pages, this branch is for display our blog site, and later we will use GitHub Action function to do automated deploy to create files to gh-pages.\n# Add all of files git add . # Add commit message git commit -m \u0026#34;init its demo blog\u0026#34; # Add main branch git branch -M main # Add remote repo git remote add origin https://github.com/\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io.git # Upload site contents to remote repo git push -u origin main # Add gh-pages orphan branch git checkout --orphan gh-pages # Add a README.md echo \u0026#34;gh-pages\u0026#34; \u0026gt; \u0026#34;README.md\u0026#34; # Add all of files git add . # Add commit message git commit -m \u0026#34;init gh-pages branch\u0026#34; # Upload site contents to remote repo git push -u origin gh-pages # Switch branch to main git checkout main Ran down all of above commands, your repository will have two branches main and gh-pages.\nStep 7: Setting GitHub Action to achieve automated deploy We need to in main branch has changed to trigger automation to deploy to gh-pages.\nPreparations First time to This page to claim ours Token for next steps, we selected options as the below picture. Then to end of the page to press \u0026ldquo;Generate Token\u0026rdquo;, and copy the Token. After, we need to store your Hugo blog\u0026rsquo;s Token, the path: Repository \u0026gt; Settings \u0026gt; Secret \u0026gt; New repository secret, like below picture, the Name you can named what you like, but the Value you have to set up as the Token we just got and press \u0026ldquo;Add Secret\u0026rdquo;. For now our preparation is done, then we have to set up our workflow.\nworkflow settings We will follow this Article\u0026rsquo;s workflow to set up GitHub Action.\nFirst we go to GitHub Action page and click \u0026ldquo;set up a workflow yourself -\u0026gt;\u0026rdquo; Copy and paste the below code and do some modifications.\nname: Build GH-Pages #you can be named what you want on: push: paths-ignore: - \u0026#39;images/**\u0026#39; - \u0026#39;LICENSE\u0026#39; - \u0026#39;README.md\u0026#39; branches: - main workflow_dispatch: # manual run jobs: deploy: runs-on: ubuntu-latest steps: - name: Git checkout uses: actions/checkout@v2 with: ref: main - name: Get Theme run: git submodule update --init --recursive - name: Update theme to Latest commit run: git submodule update --remote --merge - name: Setup hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; - name: Build run: hugo --buildDrafts --gc --verbose --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.HUGO_DEPLOY_TOKEN }} publish_dir: ./public commit_message: ${{ github.event.head_commit.message }} After modified, click the upper left angle button \u0026ldquo;Star commit\u0026rdquo; to store the workflow settings file, then you can go to your repository\u0026rsquo;s \u0026ldquo;Action\u0026rdquo; page to see your process states. when the process state shows a green ticked, means deployed success. Step 8: Publish blog new posts When you finish the previous steps, you need to go to the Repository \u0026gt; Settings page to find \u0026ldquo;Pages\u0026rdquo; to change the \u0026ldquo;Source\u0026rdquo; branch to \u0026ldquo;gh-pages\u0026rdquo;, and you finish all of the steps.\nAfter when you want to publish a new post, only do:\n Use Visual Studio Code to open your blog folder. Create a new Markdown file at \u0026ldquo;content/posts\u0026rdquo; below and write your content. Then use git to upload the entire project file to your corresponding repository.  Finally It\u0026rsquo;s my first public tutorial! And I refer to lots of articles then finally I have this result, I hope this tutorial can help those who want to create their own blogs.\nReferences This post demo Site\nThis Git repo\n如何將Hugo部落格部署到Github上?\n代码笔记\nVisual Studio Code\nGit\nChocolatey\nPaperMod Demo Site\nhugo-PaperMod\nHugo 貼身打造個人部落格\nGolden Hat\n","permalink":"https://andrewu.page/2022/01/how-to-use-hugo-to-create-your-blog/","summary":"Step by step, teach you to create a static Blog, and deploy it to GitHub! Preface I recently had a thought to create my blog, and I used many blog services but ended up with nothing. And this time I made a decision, I want to write something, so after googling, I found \u0026ldquo;Hugo\u0026rdquo; this framework, you can use Markdown to create a static blog site. by the way, I don\u0026rsquo;t want to spend too much time creating a dynamic blog site to keep my thoughts and notes.","title":"How to use Hugo to create your Blog?"},{"content":"Hi Anyone! Welcome to my blog; I\u0026rsquo;m Andrew Wu.\nI will share my thoughts/tech/diary/unboxing/travel/food and anything I want to :).\nAbout Me I\u0026rsquo;m Taiwanese, live in Harpenden, United Kingdom, Now.\nIf you want to contact me.\nMandarin and English Support To practice my English, this blog will support English and Mandarin.\nClick the Language \u0026ldquo;En\u0026rdquo; or \u0026ldquo;Zh-Tw\u0026rdquo; to change the language setting.\nThis blog is mainly in English.\nOf course, there will be corresponding Mandarin content.\nStay tuned.\nThank You for Reading. ","permalink":"https://andrewu.page/about/","summary":"Hi Anyone! Welcome to my blog; I\u0026rsquo;m Andrew Wu.\nI will share my thoughts/tech/diary/unboxing/travel/food and anything I want to :).\nAbout Me I\u0026rsquo;m Taiwanese, live in Harpenden, United Kingdom, Now.\nIf you want to contact me.\nMandarin and English Support To practice my English, this blog will support English and Mandarin.\nClick the Language \u0026ldquo;En\u0026rdquo; or \u0026ldquo;Zh-Tw\u0026rdquo; to change the language setting.\nThis blog is mainly in English.\nOf course, there will be corresponding Mandarin content.","title":"About"},{"content":"Hello 2022: Today is the first day of 2022.\nThis world has changed a lot since Covid-19 for almost two years, and yesterday I saw many countries and cities celebrate New Year\u0026rsquo;s Eve and had firework shows.\nAnd I hope it\u0026rsquo;s the final stage of Covid-19, and this world can go back to normal, and people cannot worry about this virus, meet their family or friends, and travel this world to explore their futures.\nThis year I hope I can find a QAE job in the UK and spend more time with my lover, go-to travel, go out for dinner and improve my English, finally I wish my family and my friends and I can be healthy and doing well this year and achieve their goals.\nHappy New Year 2022!!! ","permalink":"https://andrewu.page/2022/01/hello-2022/","summary":"Hello 2022: Today is the first day of 2022.\nThis world has changed a lot since Covid-19 for almost two years, and yesterday I saw many countries and cities celebrate New Year\u0026rsquo;s Eve and had firework shows.\nAnd I hope it\u0026rsquo;s the final stage of Covid-19, and this world can go back to normal, and people cannot worry about this virus, meet their family or friends, and travel this world to explore their futures.","title":"Hello 2022!"}]