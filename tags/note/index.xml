<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Note on Andrew&#39;s Blog</title>
    <link>https://andrewu.page/tags/note/</link>
    <description>Recent content in Note on Andrew&#39;s Blog</description>
    <image>
      <url>https://andrewu.page/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://andrewu.page/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 04 Apr 2022 10:30:00 +0000</lastBuildDate><atom:link href="https://andrewu.page/tags/note/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Robot Framework And Appium Install Environment On Windows</title>
      <link>https://andrewu.page/2022/04/robot-framework-and-appium-install-environment-on-windows/</link>
      <pubDate>Mon, 04 Apr 2022 10:30:00 +0000</pubDate>
      
      <guid>https://andrewu.page/2022/04/robot-framework-and-appium-install-environment-on-windows/</guid>
      <description>For Robot Framework and Appium environment on Windows, we should install softwares list below:
 Robot Framework node JDK Android Studio Appium Appium Desktop appium-doctor  First of all we have to install Java JDK for me I will need the Windows 64 bit. Java Downloads JDK And we chose the x64 Installer for our environment.
The installation is very simple we just press next, next and finish, then we can go to setting our environment.</description>
      <content:encoded><![CDATA[<p>For Robot Framework and Appium environment on Windows, we should install softwares list below:</p>
<ul>
<li>Robot Framework</li>
<li>node</li>
<li>JDK</li>
<li>Android Studio</li>
<li>Appium</li>
<li>Appium Desktop</li>
<li>appium-doctor</li>
</ul>
<p>First of all we have to install Java JDK for me I will need the Windows 64 bit.
<a href="https://www.oracle.com/java/technologies/downloads/#jdk18-windows">Java Downloads JDK</a>
And we chose the x64 Installer for our environment.</p>
<p>The installation is very simple we just press next, next and finish, then we can go to setting our environment.</p>
<p>We have to create a new system variable as below:</p>
<pre><code>Variable name: JAVE_HOME
Variable value: C:\Program Files\Java\jdk-18 # base on you jdk path
</code></pre>
<p>After Java JDK installed, we need to install our Android Studio.
<a href="https://developer.android.com/studio?gclid=CjwKCAjwrqqSBhBbEiwAlQeqGhB3kESe_97wBHxGA5_3DnKIc9L51tsNIAQ6CNZOTmnaQgR3M2PpjxoCPnoQAvD_BwE&amp;gclsrc=aw.ds">Android Studio</a>
Then downloaded Android Studio, we used the default settings and finished our installation.</p>
<p>And open our Android Studio and go to SDK Manager to download our Android SDK, then go to setting our environment too.</p>
<p>Create a new user variable as below:</p>
<pre><code>Variable name: ANDROID_HOME
Variable value: C:\Users\username\AppData\Local\Android\Sdk # you can find in SDK Manager page
</code></pre>
<p>Then edit Path variable in user variables and add new variables as below:
%ANDROID_HOME%\tools
%ANDROID_HOME%\build-tools
%ANDROID_HOME%\emulator
%ANDROID_HOME%\tools\bin</p>
<p>Finished Android Studio installation, we can install our node now.
<a href="https://nodejs.org/en/download/">node download</a>
During the installation we have to make sure at Custom Setup section has &ldquo;Add to PATH&rdquo; below.</p>
<p>Now we installed node, we can go to download our Appium now.</p>
<p>Because we alraedy installed node, we can open our cmd and type below commands to check our node and npm versions:</p>
<pre><code>node -v
npm -v
</code></pre>
<p>Make sure they show you your installed version number, then we can use npm to install our Appium.</p>
<p>The Appium install command likes below:
npm install appium -g</p>
<p>Check your appium installation, use command as below:
appium &ndash;version</p>
<p>Finally we can use npm to install appium-doctor to check our environment, we use the command below to install:
npm intaal -g appium-doctor</p>
<p>After installed appium-doctor, use <code>appium-doctor --version</code> to check your installation was successeful.</p>
<p>Then we can open a new cmd to check our appium environment, use the command below:
appium-doctor</p>
<p>Sometimes we like to use some GUI application, so we also can download Appium Desktop application.</p>
<p>We can go to <a href="https://appium.io/">Appium</a> site to download the GUI option.</p>
<p>It&rsquo;s easy to install, just press next, next and finish.</p>
<p>After that you can launch your Appium Desktop Application.</p>
<p>Check you were installed successful.</p>
<p>Finally we have to download &ldquo;Robot Framework&rdquo;, you have to download python on you Windows first, after that use <code>pip install robotframework</code> to installing Robot Framework.</p>
<p>To check that the installation was successful, run:
robot &ndash;version</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to escape Hugo shortcode</title>
      <link>https://andrewu.page/2022/04/how-to-escape-hugo-shortcode/</link>
      <pubDate>Sat, 02 Apr 2022 10:58:00 +0000</pubDate>
      
      <guid>https://andrewu.page/2022/04/how-to-escape-hugo-shortcode/</guid>
      <description>Sometimes you need to write about shortcodes, as I do in Insert raw HTML in Hugo with a simple shortcode, you need to escape these shortcode calls.
Hugo uses the following syntax to escape these delimiters in the a content source file
{{&amp;lt; escape&#39;s_shortcode_name &amp;gt;}} {{% /escape&#39;s_shortcode_name %}} </description>
      <content:encoded><![CDATA[<p>Sometimes you need to write about shortcodes, as I do in <a href="https://andrewu.page/2022/04/insert-raw-html-in-hugo-with-a-simple-shortcode/">Insert raw HTML in Hugo with a simple shortcode</a>, you need to escape these shortcode calls.</p>
<p>Hugo uses the following syntax to escape these delimiters in the a content source file</p>
<pre><code>{{&lt; escape's_shortcode_name &gt;}}

{{% /escape's_shortcode_name %}}</code></pre>
]]></content:encoded>
    </item>
    
    <item>
      <title>Insert raw HTML in Hugo with a simple shortcode</title>
      <link>https://andrewu.page/2022/04/insert-raw-html-in-hugo-with-a-simple-shortcode/</link>
      <pubDate>Fri, 01 Apr 2022 14:58:00 +0000</pubDate>
      
      <guid>https://andrewu.page/2022/04/insert-raw-html-in-hugo-with-a-simple-shortcode/</guid>
      <description>I love to use Markdown to write my notes to help me learn new things.
And sometimes, if I forget something, I can use my notes to help me remember how to do it.
But Markdown in a table or some layouts is not pretty to use, so I have to insert raw HTML to help me create a stunning table or some designs you want.
What a Shortcode is? Hugo loves Markdown because of its simple content format, but there are times when Markdown falls short.</description>
      <content:encoded><![CDATA[<p>I love to use Markdown to write my notes to help me learn new things.</p>
<p>And sometimes, if I forget something, I can use my notes to help me remember how to do it.</p>
<p>But Markdown in a table or some layouts is not pretty to use, so I have to insert raw HTML to help me create a stunning table or some designs you want.</p>
<h2 id="what-a-shortcode-is">What a Shortcode is?</h2>
<p>Hugo loves Markdown because of its simple content format, but there are times when Markdown falls short. Often, content authors are forced to add raw HTML (e.g., video <code>&lt;iframe&gt;</code>’s) to Markdown content. We think this contradicts the beautiful simplicity of Markdown’s syntax.</p>
<p>Hugo created shortcodes to circumvent these limitations.</p>
<p>Here is how to create your own custom <code>shortcode</code> to make that possible.</p>
<p>Add a shortcode template to your site in <code>layouts/shortcodes/rawhtml.html</code>, with the content below:</p>
<pre><code>&lt;!-- raw html -—&gt;
{{.Inner}}
</code></pre>
<p>This shortcode template tells Hugo to render the inner content passed to your shortcode directly into the HTML of your site.</p>
<p>You can use this shortcode in your <code>.md</code> file, it will like below:</p>
<pre tabindex="0"><code>    {{&lt; rawhtml &gt;}}
        &lt;p class=&#34;speshal-fancy-custom&#34;&gt;
            This is raw HTML, inside Markdown.
        &lt;/p&gt;
    {{&lt; /rawhtml &gt;}}
</code></pre><h2 id="references">References</h2>
<p><a href="https://gohugo.io/content-management/shortcodes/">shortcodes</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vim note</title>
      <link>https://andrewu.page/2022/03/vim-note/</link>
      <pubDate>Sat, 12 Mar 2022 15:07:00 +0000</pubDate>
      
      <guid>https://andrewu.page/2022/03/vim-note/</guid>
      <description>What is Vim? Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient. It is included as &amp;ldquo;vi&amp;rdquo; with most UNIX systems and with Apple OS X.
Vim is rock stable and is continuously being developed to become even better. Among its features are:
 persistent, multi-level undo tree extensive plugin system support for hundreds of programming languages and file formats powerful search and replace integrates with many tools  BASIC Vim modes Vim supports multiple modes.</description>
      <content:encoded><![CDATA[<h2 id="what-is-vim">What is Vim?</h2>
<p>Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient. It is included as &ldquo;vi&rdquo; with most UNIX systems and with Apple OS X.</p>
<p>Vim is rock stable and is continuously being developed to become even better. Among its features are:</p>
<ul>
<li>persistent, multi-level undo tree</li>
<li>extensive plugin system</li>
<li>support for hundreds of programming languages and file formats</li>
<li>powerful search and replace</li>
<li>integrates with many tools</li>
</ul>
<h2 id="basic">BASIC</h2>
<h3 id="vim-modes">Vim modes</h3>
<p>Vim supports multiple modes. This section discusses some of the important modes which will be used on day-to-day basis.</p>
<h3 id="command-mode">Command mode</h3>
<p>This is the default mode in which Vim starts. We can enter editor commands in this mode. We can use variety of commands in this mode like copy, paste, delete, replace and many more. We’ll discuss these commands in later sections.</p>
<h3 id="insert-mode">Insert mode</h3>
<p>You can use this mode to enter/edit text. To switch from default command to insert mode press i key. It will show current mode in bottom left corner of editor.</p>
<p>Use Escape key to switch back to command mode from this mode.</p>
<p>We can enter any text once we are in insert mode. Below image shows this.</p>
<h3 id="command-line-mode">Command line mode</h3>
<p>This mode is also used to enter commands. Commands in this mode starts with colon(:). For instance, in previous section quit command was entered in this mode. We can go to this mode either from command or insert mode.</p>
<ul>
<li>
<p>To switch from command mode to this mode just type colon</p>
</li>
<li>
<p>To switch from insert mode to this mode press Escape and type colon</p>
</li>
</ul>
<h3 id="visual-mode">Visual mode</h3>
<p>In this mode we can visually select text and run commands on selected sections.</p>
<ul>
<li>
<p>To switch from command mode to visual mode type v</p>
</li>
<li>
<p>To switch from any other mode to visual mode first switch back to command mode by pressing Escape, then type v to switch to visual mode</p>
</li>
</ul>
<p>In below image bottom left corner shows visual mode.</p>
<h3 id="create-new-file">Create new file</h3>
<p>Perform below steps to create and save new file −</p>
<ul>
<li>
<p>Execute following command to open Vim</p>
<p><code>$ vim</code></p>
</li>
<li>
<p>Type following command in Vim</p>
<p><code>:edit message.txt</code></p>
</li>
</ul>
<p>It will reload file if, it exist already</p>
<ul>
<li>
<p>Switch to insert mode</p>
<p><code>i</code></p>
</li>
<li>
<p>Enter some text</p>
</li>
<li>
<p>Switch back to command mode</p>
<p><code>Esc</code></p>
</li>
<li>
<p>Save changes to file</p>
<p><code>:w</code></p>
</li>
</ul>
<p>Now message.txt file will be created.</p>
<ul>
<li>
<p>Quit Vim</p>
<p><code>:q</code></p>
</li>
</ul>
<h3 id="open-file-in-read-only-mode">Open file in read-only mode</h3>
<p>Use –R option to open file in read-only mode</p>
<pre><code>`$ vim -R message.txt`
</code></pre>
<h3 id="edit-existing-file">Edit existing file</h3>
<p>Perform below steps to edit existing file −</p>
<ul>
<li>
<p>Open file using Vim</p>
<p><code>$ vim message.txt</code></p>
</li>
<li>
<p>Switch to insert mode and enter some text there.</p>
<p><code>i</code></p>
</li>
<li>
<p>Quit editor without saving changes.</p>
<p><code>:q!</code></p>
</li>
</ul>
<p>OR</p>
<ul>
<li>
<p>Save changes and quit editor using following command.</p>
<p><code>:wq</code></p>
</li>
</ul>
<h3 id="access-help-manual">Access help manual</h3>
<p>Help manual is shipped with Vim editor itself and it is really comprehensive. To access help execute below command</p>
<pre><code>:help
</code></pre>
<h3 id="help-on-specific-topic">Help on specific topic</h3>
<p>Help manual will show entire help about Vim. But what if, we are only interested in certain topic. Vim provides command for that as well with following syntax</p>
<pre><code>:help &lt;topic-name&gt;
</code></pre>
<p>In above command replace &lt;topic-name&gt; with topic in which you are interested. Forinstance to access help about vim mode, execute following command</p>
<pre><code>:help modes
</code></pre>
<h3 id="search-help-phrase-in-manual">Search help phrase in manual</h3>
<p>You can search specific topic only if you know its name. But what if, you don’t know the exact name of help topic. In that case you can use below command</p>
<pre><code>:helpgrep &lt;phrase&gt;
</code></pre>
<p>For instance, to access help about navigation in Vim execute below command</p>
<pre><code>:helpgrep navigation
</code></pre>
<p>Vim provides many commands which make editing functionality really powerful. In this chapter, we will discuss following items −</p>
<ul>
<li>Insert</li>
<li>Append</li>
<li>Open new line</li>
<li>Substitute</li>
<li>Change</li>
<li>Replace</li>
<li>Join</li>
</ul>
<h3 id="insert-text-before-cursor">Insert text before cursor</h3>
<p>To insert text before cursor perform following steps −</p>
<ul>
<li>To insert text before cursor perform following steps</li>
<li>Switch to insert mode
i</li>
</ul>
<h3 id="insert-text-at-the-beginning-of-line">Insert text at the beginning of line</h3>
<p>Let us suppose you are in the middle of line and you want to insert text at the beginning of current line then perform following steps</p>
<ul>
<li>Switch to command mode
Esc</li>
<li>Activate insert mode
I</li>
</ul>
<p>This action will move cursor to the beginning of current line and switch Vim in insert mode</p>
<h3 id="append-text-after-cursor">Append text after cursor</h3>
<p>To append text after cursor perform following steps</p>
<ul>
<li>Switch to command mode and move cursor to appropriate position
Esc</li>
<li>Switch to insert mode
a
This action will move cursor next by one position and switch Vim in insert mode.</li>
</ul>
<h3 id="append-text-at-the-end-of-line">Append text at the end of line</h3>
<p>Let us suppose you are in the middle of line and you want to append text at the end of current line then perform following steps</p>
<ul>
<li>Switch to command mode
Esc</li>
<li>Switch to insert mode
A</li>
</ul>
<p>This action will move cursor to the end of line and switch Vim in insert mode</p>
<h3 id="open-new-line-below-cursor">Open new line below cursor</h3>
<p>Let us suppose you are in the middle of line and you want to open new line below current line then perform following steps</p>
<ul>
<li>Switch to command mode
Esc</li>
<li>Switch to insert mode
o
This action will insert blank line below current line and switch Vim in insert mode</li>
</ul>
<h3 id="open-new-line-above-cursor">Open new line above cursor</h3>
<p>Let us suppose you are in the middle of line and you want to open new line above current line then perform following steps</p>
<p>Switch to command mode
Esc
Switch to insert mode
o
This action will insert blank line above current line and switch Vim in insert mode</p>
<h3 id="substitute-text">Substitute text</h3>
<p>Let us suppose you want to substitute single character then perform following steps</p>
<ul>
<li>
<p>Switch to command mode
Esc</p>
</li>
<li>
<p>Move cursor to appropriate position</p>
</li>
<li>
<p>Switch to insert mode
s
This action will delete character under cursor and switch Vim in insert mode To substitute entire line use</p>
<p>s
This action will delete entire line and switch Vim in insert mode.</p>
</li>
</ul>
<h3 id="change-text">Change text</h3>
<p>Let us suppose you want to change text in current line then perform following steps</p>
<ul>
<li>Switch to command mode
Esc</li>
<li>Execute following command
cc
This is similar to substitute action using S</li>
</ul>
<p>To change text from current cursor position, execute following command</p>
<pre><code>C
</code></pre>
<p>This action will delete text after current cursor position and switch Vim in insert mode.</p>
<h3 id="replace-text">Replace text</h3>
<p>To replace single character perform following steps</p>
<ul>
<li>
<p>Switch to command mode
Esc</p>
</li>
<li>
<p>Move cursor to appropriate position</p>
</li>
<li>
<p>Execute following command
r</p>
</li>
<li>
<p>Enter character to be substituted.
Note that this command will not switch Vim in insert mode</p>
</li>
</ul>
<p>To replace entire line execute</p>
<pre><code>R
</code></pre>
<h3 id="join-text">Join text</h3>
<p>To join two lines perform following steps</p>
<ul>
<li>Switch to command mode
Esc</li>
<li>Move cursor to appropriate line</li>
<li>Execute following command
J</li>
</ul>
<h3 id="basic-navigation">Basic navigation</h3>
<p>In basic navigation we can navigate to left, right, up and down by position. Below commands can be used for this</p>
<table>
<thead>
<tr>
<th>Sr.No</th>
<th>Command &amp; Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>h</code> Move cursor to left by one position</td>
</tr>
<tr>
<td>2</td>
<td><code>l</code> Move cursor to right by one position</td>
</tr>
<tr>
<td>3</td>
<td><code>k</code> Move cursor to upward direction by one line</td>
</tr>
<tr>
<td>4</td>
<td><code>j</code> Move cursor to downward direction by one line</td>
</tr>
</tbody>
</table>
<p>To perform multi-position navigation use number with these commands. For instance to navigate cursor 10 line below from current line, execute following command</p>
<pre><code>10j
</code></pre>
<p>You can use numbers with remaining commands as well.</p>
<p>In addition to this, below commands also perform some useful navigation.</p>
<table>
<thead>
<tr>
<th>Sr.No</th>
<th>Command &amp; Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>0</code> Move cursor to the beginning of current line</td>
</tr>
<tr>
<td>2</td>
<td><code>$</code> Move cursor to the end of current line</td>
</tr>
<tr>
<td>3</td>
<td><code>Ctrl + f</code> Scroll down entire page</td>
</tr>
<tr>
<td>4</td>
<td><code>Ctrl + b</code> Scroll up entire page</td>
</tr>
</tbody>
</table>
<h3 id="navigate-to-lines">Navigate to lines</h3>
<p>Below command can be used to navigate to specific line −</p>
<table>
<thead>
<tr>
<th>Sr.No</th>
<th>Command &amp; Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>:n</code> Jump to the nth line</td>
</tr>
<tr>
<td>2</td>
<td><code>:0</code> Jump to the start of file</td>
</tr>
<tr>
<td>3</td>
<td><code>:$</code> Jump to the end of file</td>
</tr>
</tbody>
</table>
<h3 id="word-navigation">Word navigation</h3>
<p>We can use following commands for word navigation</p>
<table>
<thead>
<tr>
<th>Sr.No</th>
<th>Command &amp; Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>w</code> Move cursor to the beginning of the next word</td>
</tr>
<tr>
<td>2</td>
<td><code>e</code> Move cursor to the end of the current word</td>
</tr>
<tr>
<td>3</td>
<td><code>b</code> Move cursor to the beginning of the previous word</td>
</tr>
</tbody>
</table>
<h3 id="using-jumps">Using jumps</h3>
<p>Vim keeps track of your navigation using a jump list. You can go backward and forward through that list.</p>
<p>The jump list keeps tracks of all the places you’ve been to by tracking file name, line number and column number.</p>
<p>To view jump list execute following command</p>
<pre><code>:jumps
</code></pre>
<p>Following command are based on jump list</p>
<table>
<thead>
<tr>
<th>Sr.No</th>
<th>Command &amp; Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>Ctrl + o</code> Jump back to the previous position</td>
</tr>
<tr>
<td>2</td>
<td><code>Ctrl + i</code> Jump to the next position</td>
</tr>
</tbody>
</table>
<h2 id="advance">ADVANCE</h2>
<p>We have seen basic editing earlier. Let us understand some other editing features of Vim. In this section, we will discuss following items</p>
<ul>
<li>Buffer</li>
<li>Swap files</li>
<li>Cut, copy, delete, paste actions</li>
<li>Undo and redo actions</li>
</ul>
<h3 id="buffer">Buffer</h3>
<p>Buffer is temporary memory used by Vim. When we open a file in editor, Vim loads its contents from disk drive. These contents are stored in memory (RAM) whenever we edit a file we are actually editing file from buffer. Once we finish editing and save file that time only buffer contents are transferred to appropriate file.</p>
<h3 id="swap">Swap</h3>
<p>Swap area is a file created by Vim to store buffer contents periodically. While editing file our changes may be lost because of any reasons and Vim provides swap files to provide data recovery.</p>
<p>To get actual name of swap file execute following command</p>
<pre><code>:swapname
</code></pre>
<h3 id="cut-copy-and-paste-actions">Cut, Copy and paste actions</h3>
<p>We often perform cut, copy and paste actions on text. Vim provides following commands to perform these actions (y stands for yank and p stands for paste action)</p>
<table>
<thead>
<tr>
<th>Sr.No</th>
<th>Command &amp; Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>x</code> Delete character from cursor position</td>
</tr>
<tr>
<td>2</td>
<td><code>X</code> Delete previous character from cursor position</td>
</tr>
<tr>
<td>3</td>
<td><code>y</code> Copy single character from cursor position</td>
</tr>
<tr>
<td>4</td>
<td><code>p</code> Paste character after cursor position</td>
</tr>
<tr>
<td>5</td>
<td><code>P</code> Paste character before cursor position</td>
</tr>
</tbody>
</table>
<h3 id="multi-position-command">Multi-position command</h3>
<p>We can use cut, copy and paste commands with words and sentences as well. Below table shows this</p>
<table>
<thead>
<tr>
<th>Sr.No</th>
<th>Command &amp; Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>dw</code> Delete word from cursor position</td>
</tr>
<tr>
<td>2</td>
<td><code>D</code> Delete entire line from cursor position</td>
</tr>
<tr>
<td>3</td>
<td><code>dd</code> Delete entire line</td>
</tr>
<tr>
<td>4</td>
<td><code>Y</code> Copies entire line</td>
</tr>
<tr>
<td>5</td>
<td><code>yy</code> Copies entire line</td>
</tr>
</tbody>
</table>
<p>To perform multi-line/multi-word actions just use numbers with command. You can use this syntax with other commands as well. For instance, to delete 3 words use</p>
<pre><code>3dw
</code></pre>
<h3 id="undo">Undo</h3>
<p>We can undo single or multiple actions. To perform one time undo action execute</p>
<pre><code>u
</code></pre>
<p>To perform multiple undo action, use number with same command. For instance, below command will undo last 3 actions</p>
<pre><code>3u
</code></pre>
<p>In addition to this, to undo all execute following command</p>
<pre><code>U
</code></pre>
<h3 id="redo">Redo</h3>
<p>Redo is apposite action of undo. Execute any of the command to perform redo action.</p>
<pre><code>Ctrl + r
OR
: red
</code></pre>
<h3 id="search-related-settings">Search related settings</h3>
<p>To perform incremental search execute following command</p>
<pre><code>:set incsearch
</code></pre>
<p>To highlight search execute following command</p>
<pre><code>:set hlsearch
</code></pre>
<p>To disable incremental and highlighted search execute following commands</p>
<pre><code>:set noincsearch
:set nohlsearch
</code></pre>
<h3 id="search-in-current-file">Search in current file</h3>
<h4 id="search-in-forward-direction">Search in forward direction</h4>
<p>Use following commands to perform search in forward direction −</p>
<table>
<thead>
<tr>
<th>Sr.No</th>
<th>Command &amp; Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>/&lt;expression&gt;</code> Search expression in forward direction</td>
</tr>
<tr>
<td>2</td>
<td><code>n</code> Find next occurrence. This is same and find next</td>
</tr>
<tr>
<td>3</td>
<td><code>N</code> Find previous occurrence. This is same as find previous</td>
</tr>
<tr>
<td>4</td>
<td><code>//</code> Repeat previous forward search</td>
</tr>
</tbody>
</table>
<h4 id="search-in-backward-direction">Search in backward direction</h4>
<p>Use following commands to perform search in backward direction</p>
<table>
<thead>
<tr>
<th>Sr.No</th>
<th>Command &amp; Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>?&lt;expression&gt;</code> Search expression in backward direction</td>
</tr>
<tr>
<td>2</td>
<td><code>n</code> Find previous occurrence. This is same and find previous</td>
</tr>
<tr>
<td>3</td>
<td><code>N</code> Find next occurrence. This is same as find next</td>
</tr>
<tr>
<td>4</td>
<td><code>??</code> Repeat previous backward search</td>
</tr>
</tbody>
</table>
<h4 id="search-word-under-cursor">Search word under cursor</h4>
<p>Place cursor under any word and execute following commands to perform search operation</p>
<table>
<thead>
<tr>
<th>Sr.No</th>
<th>Command &amp; Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>*</code> Search next occurrence of current word</td>
</tr>
<tr>
<td>2</td>
<td><code>#</code> Search previous occurrence of current word</td>
</tr>
</tbody>
</table>
<h4 id="search-in-multiple-files">Search in multiple files</h4>
<p>Using vimgrep command we can search <code>&lt;expression&gt;</code> in multiple files. For instance below command searches string - <code>Jarvis</code> in all text files.</p>
<pre><code>:vimgrep Jarvis *.txt
</code></pre>
<p>Note that to go to next and previous occurrence we have to use following commands</p>
<table>
<thead>
<tr>
<th>Sr.No</th>
<th>Command &amp; Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>:cn</code> Go to next occurrence of expression</td>
</tr>
<tr>
<td>2</td>
<td><code>:cN</code> Go to previous occurrence of expression</td>
</tr>
</tbody>
</table>
<h2 id="references">References</h2>
<p><a href="https://www.tutorialspoint.com/vim/vim_quick_guide.htm">vim_quick_guide</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Markdown Basic Systax</title>
      <link>https://andrewu.page/2022/02/markdown-basic-systax/</link>
      <pubDate>Tue, 15 Feb 2022 17:22:00 +0000</pubDate>
      
      <guid>https://andrewu.page/2022/02/markdown-basic-systax/</guid>
      <description>What is Markdown? Markdown is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form. Markdown is widely used in blogging, instant messaging, online forums, collaborative software, documentation pages, and readme files. from Wikipedia.
PHILOSOPHY
Markdown is intended to be as easy-to-read and easy-to-write as is feasible.</description>
      <content:encoded><![CDATA[<h2 id="what-is-markdown">What is Markdown?</h2>
<p>Markdown is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber and Aaron Swartz created Markdown in 2004 as a markup language that is appealing to human readers in its source code form. Markdown is widely used in blogging, instant messaging, online forums, collaborative software, documentation pages, and readme files. from Wikipedia.</p>
<p><strong>PHILOSOPHY</strong></p>
<p>Markdown is intended to be as <strong>easy-to-read</strong> and <strong>easy-to-write</strong> as is feasible.</p>
<p>So when you are familiar with Markdown syntax, You can easily and quickly write notes, articles and documentation etc&hellip;</p>
<h2 id="basic-syntax">BASIC SYNTAX</h2>
<h3 id="headers">HEADERS</h3>
<pre><code># This is an H1
## This is an H2
### This is an H3
#### This is an H4
##### This is an H5
###### This is an H6
</code></pre>
<p><strong>Result</strong></p>
<h1 id="this-is-an-h1">This is an H1</h1>
<h2 id="this-is-an-h2">This is an H2</h2>
<h3 id="this-is-an-h3">This is an H3</h3>
<h4 id="this-is-an-h4">This is an H4</h4>
<h5 id="this-is-an-h5">This is an H5</h5>
<h6 id="this-is-an-h6">This is an H6</h6>
<h3 id="emphasis">EMPHASIS</h3>
<h4 id="bold">BOLD</h4>
<pre><code>**double asterisks**
__double underscores__
</code></pre>
<p><strong>Result</strong></p>
<p><strong>double asterisks</strong></p>
<p><strong>double underscores</strong></p>
<h4 id="italic">ITALIC</h4>
<pre><code>*single asterisks*
_single underscores_
</code></pre>
<p><strong>Result</strong></p>
<p><em>single asterisks</em></p>
<p><em>single underscores</em></p>
<h4 id="bold-italic">BOLD ITALIC</h4>
<pre><code>***Triple asterisks***
___Triple underscores___
</code></pre>
<p><strong>Result</strong></p>
<p><em><strong>Triple asterisks</strong></em></p>
<p><em><strong>Triple underscores</strong></em></p>
<h3 id="paragraphs">PARAGRAPHS</h3>
<p>A paragraph is composed of more than one connected line sentence, and more than one blank line will split into different paragraphs.</p>
<pre><code>This is the first paragraph.

This is the second paragraph.
</code></pre>
<h3 id="lists">LISTS</h3>
<p>Markdown supports ordered (numbered) and unordered (bulleted) lists.</p>
<p>Unordered lists use asterisks, pluses, and hyphens — interchangably — as list markers:</p>
<h4 id="unordered-lists">Unordered lists</h4>
<pre><code>* Red
* Orange
* Yellen

+ Red
+ Orange
+ Yellen

- Red
- Orange
- Yellen
</code></pre>
<p><strong>Result</strong></p>
<ul>
<li>Red</li>
<li>Orange</li>
<li>Yellen</li>
</ul>
<ul>
<li>Red</li>
<li>Orange</li>
<li>Yellen</li>
</ul>
<ul>
<li>Red</li>
<li>Orange</li>
<li>Yellen</li>
</ul>
<h4 id="ordered-lists-use-numbers-followed-by-periods">Ordered lists use numbers followed by periods:</h4>
<pre><code>1. Red
2. Orange
3. Yellen
</code></pre>
<p><strong>Result</strong></p>
<ol>
<li>Red</li>
<li>Orange</li>
<li>Yellen</li>
</ol>
<p>To use a multi-level list, use an indent or two half-spaces on the next level.</p>
<pre><code>- Red
- Orange
- Yellen
    - Sub Red
    - Sub Orange
        - three
</code></pre>
<p><strong>Result</strong></p>
<ul>
<li>Red</li>
<li>Orange</li>
<li>Yellen
<ul>
<li>Sub Red</li>
<li>Sub Orange
<ul>
<li>three</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="checkbox">CHECKBOX</h3>
<p>For to-do or confirmation items, use the * [] symbol at the beginning of the item, and an x in brackets means it is selected.</p>
<pre><code>* [x] This is a complete item
* [ ] This is an incomplete item
</code></pre>
<p><strong>Result</strong></p>
<ul>
<li><input checked="" disabled="" type="checkbox"> This is a complete item</li>
<li><input disabled="" type="checkbox"> This is an incomplete item</li>
</ul>
<h3 id="horizontal-rules">HORIZONTAL RULES</h3>
<p>You can produce a horizontal rule tag (&lt;hr /&gt;) by placing three or more hyphens, asterisks, or underscores on a line by themselves. If you wish, you may use spaces between the hyphens or asterisks. Each of the following lines will produce a horizontal rule:</p>
<pre><code>***
---
___

********
* * *
----------
- - -
</code></pre>
<p><strong>Result</strong></p>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<h2 id="advance-syntax">ADVANCE SYNTAX</h2>
<h3 id="links">LINKS</h3>
<ol>
<li>A square bracket to place the link text</li>
<li>A parenthesis, place the link path or URL, enclosed in double quotes to add prompt text</li>
</ol>
<pre tabindex="0"><code>[GitHub](https://andrewwu29.github.io &#34;My GitHub&#34;)
</code></pre><p><strong>Result</strong></p>
<p><a href="https://andrewwu29.github.io" title="My GitHub">GitHub</a></p>
<h3 id="images">IMAGES</h3>
<p>Admittedly, it’s fairly difficult to devise a “natural” syntax for placing images into a plain text document format.</p>
<p>Markdown uses an image syntax that is intended to resemble the syntax for links, allowing for two styles: inline and reference.</p>
<p>Inline image syntax looks like this:</p>
<pre><code>![Img](/path/image.jpg)
![Img](/path/image.jpg &quot;title&quot;)
</code></pre>
<p><strong>Result</strong></p>
<p>inline
<img loading="lazy" src="https://i.imgur.com/C40N0ds.jpg" alt="York Minster Pic"  />

reference
<img loading="lazy" src="https://i.imgur.com/C40N0ds.jpg" alt="York Minster Pic"  title="York Minster"  />
</p>
<h3 id="automatic-links">AUTOMATIC LINKS</h3>
<p>Markdown supports a shortcut style for creating “automatic” links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:</p>
<pre><code>&lt;https://andrewwu29.github.io&gt;
</code></pre>
<p><strong>Result</strong></p>
<p><a href="https://andrewwu29.github.io">https://andrewwu29.github.io</a></p>
<h3 id="table">TABLE</h3>
<p>Markdown table is a little bit complicated, and the layout is not too beautiful if you want to use it, and try not to make a large table.</p>
<ul>
<li>The outer pipe is not required.</li>
<li>Left-aligned writing is to add : on the left side, such as :&mdash;, similarly, right-aligned is to add a colon on the right &mdash;:</li>
<li>Center alignment is rendered by adding colons :&ndash;: on both sides.</li>
</ul>
<pre tabindex="0"><code>| Plugin | README |
| ------ | ------ |
| Dropbox | [plugins/dropbox/README.md][PlDb] |
| GitHub | [plugins/github/README.md][PlGh] |
| Google Drive | [plugins/googledrive/README.md][PlGd] |
| OneDrive | [plugins/onedrive/README.md][PlOd] |
| Medium | [plugins/medium/README.md][PlMe] |
| Google Analytics | [plugins/googleanalytics/README.md][PlGa] |
</code></pre><h3 id="code">CODE</h3>
<p>To indicate a span of code, wrap it with backtick quotes (`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p>
<pre><code>Use the `printf()` function.

``There is a literal backtick (`) here.``

A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
</code></pre>
<p><strong>Result</strong></p>
<p>Use the <code>printf()</code> function.</p>
<p><code>There is a literal backtick (`) here.</code></p>
<p>A single backtick in a code span: <code>`</code></p>
<p>A backtick-delimited string in a code span: <code>`foo`</code></p>
<h4 id="code-blocks">CODE BLOCKS</h4>
<p>To produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab. For example, given this input:</p>
<pre><code>Here is an example of AppleScript:

    tell application &quot;Foo&quot;
        beep
    end tell
</code></pre>
<p><strong>Result</strong></p>
<p>Here is an example of AppleScript:</p>
<pre><code>tell application &quot;Foo&quot;
    beep
end tell
</code></pre>
<h3 id="backslash-escapes">BACKSLASH ESCAPES</h3>
<p>Markdown allows you to use backslash escapes to generate literal characters which would otherwise have special meaning in Markdown’s formatting syntax.</p>
<p>Markdown provides backslash escapes for the following characters:</p>
<table>
<thead>
<tr>
<th style="text-align:center">characters</th>
<th style="text-align:center">name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:center">backslash</td>
</tr>
<tr>
<td style="text-align:center">`</td>
<td style="text-align:center">backtick</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">asterisk</td>
</tr>
<tr>
<td style="text-align:center">_</td>
<td style="text-align:center">underscore</td>
</tr>
<tr>
<td style="text-align:center">{}</td>
<td style="text-align:center">curly braces</td>
</tr>
<tr>
<td style="text-align:center">[]</td>
<td style="text-align:center">square brackets</td>
</tr>
<tr>
<td style="text-align:center">()</td>
<td style="text-align:center">parentheses</td>
</tr>
<tr>
<td style="text-align:center">#</td>
<td style="text-align:center">hash mark</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">plus sign</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">minus sign (hyphen)</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">dot</td>
</tr>
<tr>
<td style="text-align:center">!</td>
<td style="text-align:center">exclamation mark</td>
</tr>
</tbody>
</table>
<h3 id="blockquotes">BLOCKQUOTES</h3>
<p>Markdown uses email-style &gt; characters for blockquoting.</p>
<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<p>Markdown allows you only put the &gt; before the first line of a hard-wrapped paragraph:</p>
<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
</blockquote>
<blockquote>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<p>Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of &gt;:</p>
<blockquote>
<p>This is the first level of quoting.</p>
<blockquote>
<p>This is nested blockquote.</p>
<blockquote>
<p>Back to the first level.</p>
</blockquote>
</blockquote>
</blockquote>
<p>Blockquotes can contain other Markdown elements, including headers, lists, and code blocks:</p>
<blockquote>
<h2 id="this-is-a-header">This is a header.</h2>
<ol>
<li>This is the first list item.</li>
<li>This is the second list item.</li>
</ol>
<p>Here&rsquo;s some example code:</p>
<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre>
</blockquote>
<h2 id="references">References</h2>
<p><a href="https://daringfireball.net/projects/markdown/syntax#img">Markdown: Syntax</a></p>
<p><a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a></p>
<p><a href="https://fakestandard.github.io/post/markdown/markdown-1-heymarkdown/">Markdown筆記神器</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to add an RSS feed to your Hugo PaperMod theme?</title>
      <link>https://andrewu.page/2022/02/how-to-add-an-rss-feed-to-your-hugo-papermod-theme/</link>
      <pubDate>Sun, 06 Feb 2022 12:52:00 +0000</pubDate>
      
      <guid>https://andrewu.page/2022/02/how-to-add-an-rss-feed-to-your-hugo-papermod-theme/</guid>
      <description>Hugo is a popular static site generator, and PaperMod comes with a default RSS 2.0 template.
What is an RSS feed? RSS stands for Really Simple Syndication, and it’s is a simple, standardized content distribution method that can help you stay up-to-date with your favorite newscasts, blogs, websites, and social media channels.
Means supported an RSS feed function on your blog, can keep those who follow you up-to-date with your newest posts.</description>
      <content:encoded><![CDATA[<p>Hugo is a popular static site generator, and PaperMod comes with a default RSS 2.0 template.</p>
<h2 id="what-is-an-rss-feed">What is an RSS feed?</h2>
<p>RSS stands for Really Simple Syndication, and it’s is a simple, standardized content distribution method that can help you stay up-to-date with your favorite newscasts, blogs, websites, and social media channels.</p>
<p>Means supported an RSS feed function on your blog, can keep those who follow you up-to-date with your newest posts.</p>
<h2 id="add-an-rss-feed-on-your-hugo-papermod-theme-only-three-steps">Add an RSS feed on your Hugo PaperMod theme only three steps</h2>
<h3 id="step-1-ensure-rss-is-listed-as-an-output-format-inside-your-configyml-file">Step 1: Ensure <code>RSS</code> is listed as an <code>output</code> format inside your <code>config.yml</code> file</h3>
<h3 id="step-2-add-an-rss-feed-icon-on-your-site">Step 2: Add an RSS feed icon on your site</h3>
<h3 id="step-3-enable-full-content-support-generated-rss-xml-file">Step 3: Enable full content support generated RSS XML file</h3>
<p>So your <code>config.yml</code> file must include as below code:</p>
<pre tabindex="0"><code>params:
  ShowFullTextinRSS: true # Supports to show your whole contents in RSS, not just summary
  
  socialIcons:
    - name: rss # Shows an RSS feed icon on your site`
      url: &#34;index.xml&#34; # Your RSS feed url path

outputs:
    home:
        - HTML
        - RSS # Supports your site output including RSS format
        - JSON
</code></pre><p><strong>After finishing the above steps, now your Hugo PaperMod theme site can support an RSS feed.</strong></p>
<h2 id="references">References</h2>
<p><a href="https://link.medium.com/8MgjDu9vqnb">Setting up an RSS feed for a Hugo blog using the PaperMod Theme</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to integrate Disqus into your Hugo site?</title>
      <link>https://andrewu.page/2022/02/how-to-integrate-disqus-into-your-hugo-site/</link>
      <pubDate>Sat, 05 Feb 2022 16:44:00 +0000</pubDate>
      
      <guid>https://andrewu.page/2022/02/how-to-integrate-disqus-into-your-hugo-site/</guid>
      <description>What is Disqus? The internet&amp;rsquo;s favorite comment plug-in makes it easy for publishers to bring their content to life, fuel colorful discussions, efficiently moderate comments, and build engaged communities.
Step by step to integrate Disqus into your Hugo Site Step 1: Sign up for Disqus Step 2: Install Disqus Step 3: Chose &amp;ldquo;I want to install Disqus on my site.&amp;rdquo; Step 4: Fill in the Form details for your Hugo site Step 5: Copy the discussion templates, and create a disqus.</description>
      <content:encoded><![CDATA[<h2 id="what-is-disqus">What is Disqus?</h2>
<p>The internet&rsquo;s favorite comment plug-in makes it easy for publishers to bring their content to life, fuel colorful discussions, efficiently moderate comments, and build engaged communities.</p>
<h2 id="step-by-step-to-integrate-disqus-into-your-hugo-site">Step by step to integrate Disqus into your Hugo Site</h2>
<h3 id="step-1-sign-up-for-disqus">Step 1: Sign up for Disqus</h3>
<h3 id="step-2-install-disqus">Step 2: Install Disqus</h3>
<h3 id="step-3-chose-i-want-to-install-disqus-on-my-site">Step 3: Chose &ldquo;I want to install Disqus on my site.&rdquo;</h3>
<h3 id="step-4-fill-in-the-form-details-for-your-hugo-site">Step 4: Fill in the Form details for your Hugo site</h3>
<h3 id="step-5-copy-the-discussion-templates-and-create-a-disqushtml-file-under-your-hugo-site-folder-layoutspartials-then-paste-it-inside-the-file">Step 5: Copy the discussion templates, and create a disqus.html file under your Hugo site folder layouts/partials, then paste it inside the file</h3>
<p>The template will be like below:</p>
<pre tabindex="0"><code>&lt;div id=&#34;disqus_thread&#34;&gt;&lt;/div&gt;
&lt;script&gt;
    /**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */
    /*
    var disqus_config = function () {
    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page&#39;s canonical URL variable
    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page&#39;s unique identifier variable
    };
    */
    (function() { // DON&#39;T EDIT BELOW THIS LINE
    // Don&#39;t ever inject Disqus on localhost--it creates unwanted
    // discussions from &#39;localhost:1313&#39; on your Disqus account...
    if (window.location.hostname == &#34;localhost&#34;)
        return;


    var d = document, s = d.createElement(&#39;script&#39;);
    s.src = &#39;https://your_disqus_name.disqus.com/embed.js&#39;;
    s.setAttribute(&#39;data-timestamp&#39;, +new Date());
    (d.head || d.body).appendChild(s);
    })();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&#34;https://disqus.com/?ref_noscript&#34;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
</code></pre><h3 id="step-6-create-a-commentshtml-file-under-your-hugo-site-folder-layoutspartials-and-copy-and-paste-the-below-code-inside-the-file">Step 6: Create a comments.html file under your Hugo site folder layouts/partials, and copy and paste the below code inside the file</h3>
<pre tabindex="0"><code>{{- /* Comments area start */ -}}
{{- /* partial &#34;disqus.html&#34; . */ -}}
{{ template &#34;_internal/disqus.html&#34; . }}
{{- /* to add comments read =&gt; https://gohugo.io/content-management/comments/ */ -}}
{{- /* Comments area end */ -}}
</code></pre><h3 id="step-7-add-disqus-shortname-disqusshortname--your-disqus-shortname-in-your-configyml-file">Step 7: Add Disqus shortname <code>disqusShortname = &quot;&lt;your-disqus-shortname&gt;&quot;</code> in your config.yml file</h3>
<h3 id="step-8-congratulations-now-it-is-all-done-you-can-push-it-to-your-github-repo">Step 8: Congratulations, now it is all done. You can push it to your GitHub repo</h3>
<h2 id="references">References</h2>
<p><a href="https://disqus.com">Disqus</a></p>
<p><a href="https://gohugo.io/templates/internal/">Internal Templates | Hugo</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to add Google Analytics to Hugo?</title>
      <link>https://andrewu.page/2022/02/how-to-add-google-analytics-to-hugo/</link>
      <pubDate>Fri, 04 Feb 2022 14:25:00 +0000</pubDate>
      
      <guid>https://andrewu.page/2022/02/how-to-add-google-analytics-to-hugo/</guid>
      <description>What is Google Analytics? Google Analytics is a web analytics service that provides statistics and basic analytical tools for search engine optimization (SEO) and marketing purposes. The service is part of the Google Marketing Platform and is available for free to anyone with a Google account.
How to add google analytics to Hugo site? Step 1: Create a google account Step 2: Go to google analytics site Step 3: Set up your site details in google analytics Step 4: Get your site google analytics ID Step 5: Set up your Hugo config.</description>
      <content:encoded><![CDATA[<h2 id="what-is-google-analytics">What is Google Analytics?</h2>
<p>Google Analytics is a web analytics service that provides statistics and basic analytical tools for search engine optimization (SEO) and marketing purposes. The service is part of the Google Marketing Platform and is available for free to anyone with a Google account.</p>
<h2 id="how-to-add-google-analytics-to-hugo-site">How to add google analytics to Hugo site?</h2>
<h3 id="step-1-create-a-google-accounthttpsaccountsgooglecomsignupv2webcreateaccountserviceanalyticscontinuehttps3a2f2fanalyticsgooglecom2fanalytics2fweb2fhlendshs9237899823a1643982945903281bizfalseflownameglifwebsigninflowentrysignupnogmtrue">Step 1: Create a <a href="https://accounts.google.com/signup/v2/webcreateaccount?service=analytics&amp;continue=https%3A%2F%2Fanalytics.google.com%2Fanalytics%2Fweb%2F&amp;hl=en&amp;dsh=S923789982%3A1643982945903281&amp;biz=false&amp;flowName=GlifWebSignIn&amp;flowEntry=SignUp&amp;nogm=true">google account</a></h3>
<h3 id="step-2-go-to-google-analyticshttpsanalyticsgooglecomanalyticswebprovisionprovision-site">Step 2: Go to <a href="https://analytics.google.com/analytics/web/provision/#/provision">google analytics</a> site</h3>
<h3 id="step-3--set-up-your-site-details-in-google-analytics">Step 3:  Set up your site details in google analytics</h3>
<h3 id="step-4-get-your-site-google-analytics-id">Step 4: Get your site google analytics ID</h3>
<h3 id="step-5-set-up-your-hugo-configyml">Step 5: Set up your Hugo config.yml</h3>
<p>Add <code>googleAnalytics: G-MEASUREMENT_ID</code> in your config.yml file.</p>
<h3 id="step-6-add-google-analytics-template-in-your-hugo-theme">Step 6: Add google analytics template in your Hugo theme</h3>
<p>Add <code>{{ template &quot;_internal/google_analytics.html&quot; . }}</code> in your theme’s head.html file <code>&lt;head&gt;</code> section</p>
<h2 id="references">References</h2>
<p><a href="https://searchbusinessanalytics.techtarget.com/definition/Google-Analytics">DEFINITION Google Analytics</a></p>
<p><a href="https://analytics.google.com/analytics/web/provision/#/provision">Google Analytics</a></p>
<p><a href="https://gohugo.io/templates/internal/">Internal Templates | Hugo</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Git Basic Commands</title>
      <link>https://andrewu.page/2022/01/git-basic-commands/</link>
      <pubDate>Wed, 12 Jan 2022 15:30:00 +0000</pubDate>
      
      <guid>https://andrewu.page/2022/01/git-basic-commands/</guid>
      <description>Checks your Git version git --version Settings your Git user name &amp;amp; email git config --global user.name &amp;#34;Andrew_Wu&amp;#34; git config --global user.email &amp;#34;user@gmail.com&amp;#34; Checks your configurations git config --list Get Help git help &amp;lt;command&amp;gt; #get help for a git command Creates a new git repo git init # create a new git repo, with data stored in the `.git` directory Shows current repo status git status #tells you what&amp;#39;s going on Adds files to stage git add &amp;lt;filename&amp;gt; #adds seleted filename to stagin area git add .</description>
      <content:encoded><![CDATA[<h2 id="checks-your-git-version">Checks your Git version</h2>
<pre tabindex="0"><code>git --version
</code></pre><h2 id="settings-your-git-user-name--email">Settings your Git user name &amp; email</h2>
<pre tabindex="0"><code>git config --global user.name &#34;Andrew_Wu&#34;
git config --global user.email &#34;user@gmail.com&#34;
</code></pre><h3 id="checks-your-configurations">Checks your configurations</h3>
<pre tabindex="0"><code>git config --list
</code></pre><h2 id="get-help">Get Help</h2>
<pre tabindex="0"><code>git help &lt;command&gt; #get help for a git command
</code></pre><h2 id="creates-a-new-git-repo">Creates a new git repo</h2>
<pre tabindex="0"><code>git init # create a new git repo, with data stored in the `.git` directory
</code></pre><h2 id="shows-current-repo-status">Shows current repo status</h2>
<pre tabindex="0"><code>git status #tells you what&#39;s going on
</code></pre><h2 id="adds-files-to-stage">Adds files to stage</h2>
<pre tabindex="0"><code>git add &lt;filename&gt; #adds seleted filename to stagin area
git add . #add all files to staging area
</code></pre><h2 id="creates-a-new-commit">Creates a new commit</h2>
<pre tabindex="0"><code>git commit
git commit -m &#34;commit message&#34; #-m means Message
</code></pre><h2 id="shows-a-log">Shows a log</h2>
<pre tabindex="0"><code>git log #shows a flattened log of history
git log --all --graph --decorate #visualizes history as a DAG
</code></pre><h2 id="show-changes">Show changes</h2>
<pre tabindex="0"><code>git diff &lt;filename&gt; #show changes you made relative to the staging area
git diff &lt;revision&gt; &lt;filename&gt; #shows differences in a file between snapshots
</code></pre><h2 id="branch">Branch</h2>
<pre tabindex="0"><code>git checkout &lt;revision&gt; #updates HEAD and current branch
git branch #shows branches
git branch &lt;name&gt; #creates a branch
git branch -d &lt;name&gt; #deleted a branch
git checkout -b &lt;name&gt; #creates a branch and switches to it
same as git branch &lt;name&gt;; git checkout &lt;name&gt;
</code></pre><h2 id="merge">Merge</h2>
<pre tabindex="0"><code>git merge &lt;revision&gt; #merges into current branch
git mergetool #use a fancy tool to help resolve merge conflicts
git rebase #rebase set of patches onto a new base
git rebase -i HEAD~3 #modify history commit records
</code></pre><h2 id="remote">Remote</h2>
<pre tabindex="0"><code>git remote #list remotes
git remote add &lt;name&gt; &lt;url&gt; #add a remote
git push &lt;remote&gt; &lt;local branch&gt;:&lt;remote branch&gt; #send objects to reomote, and update reomte reference
git branch --set-upstream-to=&lt;remote&gt;/&lt;remote branch&gt; #set up correspondence between local and remote branch
git fetch #retrieve objects/references from a remote
git pull #Sync local and remote repos，same as git fetch; git merge
git clone #download repository form remote
</code></pre><h2 id="undo">Undo</h2>
<pre tabindex="0"><code>git commit --amend #edit a commit&#39;s contents/message
git reset HEAD &lt;file&gt; #unstage a file
git checkout -- &lt;file&gt; #discard changes
</code></pre><h2 id="advance">Advance</h2>
<pre tabindex="0"><code>git clown --depth=1 #shallow clone, without entire version history
git add -p #interactive staging
git blame #show who last edited which line
git stash #temporarily remove modifications to working directory
git bisect #binary search history (e.g. for regressions)
.gitignore #specify intentionally untracked files to ignore
</code></pre><h2 id="references">References</h2>
<p><a href="https://missing.csail.mit.edu/2020/version-control/">Version Control (Git)</a></p>
<p><a href="https://blog.techbridge.cc/2018/01/17/learning-programming-and-coding-with-python-git-and-github-tutorial/">Git 與 Github 版本控制基本指令與操作入門教學</a></p>
<p><a href="https://www.maxlist.xyz/2020/05/10/git-tutorial/">Git教學 初心者懶人包 Git 入門</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>How to use Hugo to create your Blog?</title>
      <link>https://andrewu.page/2022/01/how-to-use-hugo-to-create-your-blog/</link>
      <pubDate>Wed, 05 Jan 2022 17:13:00 +0000</pubDate>
      
      <guid>https://andrewu.page/2022/01/how-to-use-hugo-to-create-your-blog/</guid>
      <description>Step by step, teach you to create a static Blog, and deploy it to GitHub! Preface I recently had a thought to create my blog, and I used many blog services but ended up with nothing. And this time I made a decision, I want to write something, so after googling, I found &amp;ldquo;Hugo&amp;rdquo; this framework, you can use Markdown to create a static blog site. by the way, I don&amp;rsquo;t want to spend too much time creating a dynamic blog site to keep my thoughts and notes.</description>
      <content:encoded><![CDATA[<h1 id="step-by-step-teach-you-to-create-a-static-blog-and-deploy-it-to-github">Step by step, teach you to create a static Blog, and deploy it to GitHub!</h1>
<h2 id="preface">Preface</h2>
<p>I recently had a thought to create my blog, and I used many blog services but ended up with nothing.
And this time I made a decision, I want to write something, so after googling, I found &ldquo;Hugo&rdquo; this framework, you can use Markdown to create a static blog site.
by the way, I don&rsquo;t want to spend too much time creating a dynamic blog site to keep my thoughts and notes.
For me this solution, you can use the free GitHub service to be your site host or pay some money to be a private repository and you can show your site too.</p>
<p>If you want to create your blog and you have budget concerns, you might consider using Hugo to deploy your blog site.</p>
<h2 id="preparations">Preparations</h2>
<p>First of all, we have to install Git to handle our stuff and deploy it to Git public repository, and then we need software to help us write Markdown files. (e.g.: Visual Studio Code with Markdown extension)</p>
<h3 id="git-install--check">Git install &amp; check</h3>
<p>First, we can go to Git official site to Windows. <a href="https://git-scm.com/download/win">Download for Windows</a> follow your system bit to download a related version, that double clicks mouse left button, then press &ldquo;Next&rdquo; to &ldquo;Install&rdquo;, and you can finish the installation.
<img loading="lazy" src="https://i.imgur.com/xCCcS5k.png" alt="git dwonload for Windows"  />

<img loading="lazy" src="https://i.imgur.com/PTSyXhj.png" alt="git Setup"  />

After installation, we can use the Windows shortcuts &ldquo;Win key + S key&rdquo;, and type &ldquo;CMD&rdquo; to open Terminal.
<img loading="lazy" src="https://i.imgur.com/wjbN68m.png" alt="WinKey&#43;Shift&#43;CMD"  />

And then type command as below.</p>
<pre tabindex="0"><code> git version
</code></pre><p>you can get it as below.</p>
<pre tabindex="0"><code>git version 2.xx.x.windows.x
</code></pre><p><img loading="lazy" src="https://i.imgur.com/kxjfjJw.png" alt="git version check"  />
</p>
<p>When we can query our git version, means we finished our git installation.
And then we need to install Visual Studio Code, it&rsquo;s a free IDE, and we have to install an extension to handle Markdown.</p>
<h3 id="visual-studio-code--markdown-extension-install">Visual Studio Code &amp; Markdown extension install</h3>
<p>Same we go to <a href="https://code.visualstudio.com/">Visual Studio Code</a> site to download the install file and start to install, same &ldquo;Next&rdquo; to &ldquo;Install&rdquo;.
<img loading="lazy" src="https://i.imgur.com/2isdgIM.png" alt="Visual Studio Code download"  />

<img loading="lazy" src="https://i.imgur.com/qcjQ9ex.png" alt="Visual Studio Code Setup Next"  />

<img loading="lazy" src="https://i.imgur.com/aEadDI2.png" alt="Visual Studio Code Setup Install"  />

Installed and open it, you will see as below.
<img loading="lazy" src="https://i.imgur.com/Ir3fuCX.png" alt="ms_VisualStudioCode_Get_Started"  />

Then we go to &ldquo;View&rdquo; -&gt; &ldquo;Extensions&rdquo;(Also can use shortcuts Ctrl+Shift+X) to search &ldquo;Markdown&rdquo; Extensions, to find &ldquo;markdownlint&rdquo; and install it.
<img loading="lazy" src="https://i.imgur.com/cbg6cxa.png" alt="ms_VisualStudioCode_Get_Extensions"  />

<img loading="lazy" src="https://i.imgur.com/s3G9wGL.png" alt="ms_VisualStudioCode_Install_Markdown_Extension"  />
</p>
<p><strong>Now, we have already installed Git &amp; Visual Studio Code w/ markdownlint Extension.</strong></p>
<p>after we have to install Hugo and create our blog&rsquo;s first post.</p>
<h2 id="hugo-install-and-create-our-site">Hugo install and create our site</h2>
<p>Before installing Hugo we have to install <a href="https://chocolatey.org/install#individual">chocolatey</a> this tool, here we use &ldquo;Individual&rdquo; with Administrative&rsquo;s PowerShell and use the below command to install.</p>
<pre tabindex="0"><code>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://community.chocolatey.org/install.ps1&#39;))
</code></pre><p><strong>Installed chocolatey this tool, we can start to build our blog site.</strong></p>
<h3 id="step-1-install-hugo">Step 1: Install Hugo</h3>
<p>We follow <a href="https://gohugo.io/getting-started/quick-start/">quick started</a>to install Hugo. This time we use the normal version, so follow the manual to use the below command to install it.</p>
<pre tabindex="0"><code>choco install hugo -confirm
</code></pre><p>After installing Hugo, we have to check are we installed success, we can use the command below.</p>
<pre tabindex="0"><code>hugo version
</code></pre><h3 id="step-2-create-a-site">Step 2: Create a site</h3>
<p>After we need to create our site, we will use <code>yml</code> format, so we use the command below.</p>
<pre tabindex="0"><code>hugo new site &lt;folder name&gt; -f yml
</code></pre><p>When you see as below, means created successfully.
<img loading="lazy" src="https://i.imgur.com/U86gMSu.png" alt="Create a new site with yml format"  />
</p>
<h3 id="step-3-add-hugoe-theme">Step 3: Add Hugoe theme</h3>
<p>Finished Hugo site build, we have to add a theme for Hugo to make your site not look like too simple. We can go to <a href="https://themes.gohugo.io/">Hugo Themes</a> to pick up a theme for yourself.</p>
<p>I will use <a href="https://github.com/adityatelange/hugo-PaperMod">PaperMod</a> for this demo.</p>
<p>First of all, we have to switch our path to our folder name, and we can go in terminal to type &ldquo;CD <!-- raw HTML omitted -->&rdquo;, and our created folder name is &ldquo;its_demo_blog&rdquo;, so we can type command as below.</p>
<pre tabindex="0"><code>cd &lt;Your folder name&gt;
</code></pre><p>Then we have to in this folder to create a new Git repo to use the command below.</p>
<pre tabindex="0"><code>git init
</code></pre><p>The result will like below.
<img loading="lazy" src="https://i.imgur.com/BSdMrfg.png" alt="git init"  />
</p>
<p>After we need to add our theme to our site folder to create &ldquo;themes/PaperMod&rdquo; under the root, we can use the command below.</p>
<pre tabindex="0"><code>git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
</code></pre><p>After we will see as below.
<img loading="lazy" src="https://i.imgur.com/uS0G58D.png" alt="git add submodule PaperMod"  />
</p>
<p>Then we follow PaperMod&rsquo;s <a href="https://github.com/adityatelange/hugo-PaperMod/wiki/Installation">Official Manual</a>, to modify our <code>config.yml</code>.</p>
<pre tabindex="0"><code>baseURL: &#34;&lt;username.github.io&gt;&#34; #GitHub repo URL
title: its demo blog #site title
paginate: 5
# Default Language setting
defaultContentLanguage: zh-tw
# Theme setting
theme: PaperMod #this time we use PaperMod

enableRobotsTXT: true
buildDrafts: false
buildFuture: false
buildExpired: false

# GooleAnalytics servies
googleAnalytics: UA-123-45


# URL link setting
permalinks:
  posts: /:year/:month/:title/

minify:
  disableXML: true
  minifyOutput: true

params:
  env: production # to enable google analytics, opengraph, twitter-cards and schema.
  title: its demo blog
  description: &#34;its demo blog description&#34;
  keywords: [Blog, Portfolio, PaperMod]
  author: Me
  # author: [&#34;Me&#34;, &#34;You&#34;] # multiple authors
  images: [&#34;&lt;link or path of image for opengraph, twitter-cards&gt;&#34;]
  DateFormat: &#34;January 2, 2006&#34;
  defaultTheme: auto # dark, light
  disableThemeToggle: false

  ShowReadingTime: true
  ShowShareButtons: true
  ShowPostNavLinks: true
  ShowBreadCrumbs: true
  ShowCodeCopyButtons: false
  disableSpecial1stPost: false
  disableScrollToTop: false
  comments: false
  hidemeta: false
  hideSummary: false
  showtoc: false
  tocopen: false

  assets:
    # disableHLJS: true # to disable highlight.js
    # disableFingerprinting: true
    favicon: &#34;&lt;link / abs url&gt;&#34;
    favicon16x16: &#34;&lt;link / abs url&gt;&#34;
    favicon32x32: &#34;&lt;link / abs url&gt;&#34;
    apple_touch_icon: &#34;&lt;link / abs url&gt;&#34;
    safari_pinned_tab: &#34;&lt;link / abs url&gt;&#34;

  label:
    text: &#34;its demo blog&#34;
    #icon: /apple-touch-icon.png
    iconHeight: 35

  # profile-mode
  profileMode:
    enabled: false # needs to be explicitly set
    title: ExampleSite
    subtitle: &#34;This is subtitle&#34;
    imageUrl: &#34;&lt;img location&gt;&#34;
    imageWidth: 120
    imageHeight: 120
    imageTitle: my image
    buttons:
      - name: Posts
        url: posts
      - name: Tags
        url: tags

  # home-info mode this time we use Home-info mode, also it&#39;s default setting
  homeInfoParams:
    Title: &#34;Hi All \U0001F44B&#34;
    Content: Welcome to my blog.

  # You can put your social site links
  socialIcons:
    - name: twitter
      url: &#34;https://twitter.com/&#34;
    - name: stackoverflow
      url: &#34;https://stackoverflow.com&#34;
    - name: github
      url: &#34;https://github.com/&#34;

  analytics:
    google:
      SiteVerificationTag: &#34;XYZabc&#34;
    bing:
      SiteVerificationTag: &#34;XYZabc&#34;
    yandex:
      SiteVerificationTag: &#34;XYZabc&#34;

  cover:
    hidden: true # hide everywhere but not in structured data
    hiddenInList: true # hide on list pages and home
    hiddenInSingle: true # hide on single page

  # someone can mention you edit a post
  #editPost:
    #URL: &#34;https://github.com/&lt;path_to_repo&gt;/content&#34;
    #Text: &#34;Suggest Changes&#34; # edit text
    #appendFilePath: true # to append file path to Edit link

  # for search
  # https://fusejs.io/api/options.html
  fuseOpts:
    isCaseSensitive: false
    shouldSort: true
    location: 0
    distance: 1000
    threshold: 0.4
    minMatchCharLength: 0
    keys: [&#34;title&#34;, &#34;permalink&#34;, &#34;summary&#34;, &#34;content&#34;]
menu:
  main:
    - identifier: posts
      name: Posts
      url: /posts/
      weight: 1
    - identifier: categories
      name: Categories
      url: /categories/
      weight: 2
    - identifier: tags
      name: Tags
      url: /tags/
      weight: 3
    #- identifier: search
    #  name: Search
    #  url: search
    #  weight: 4
    #- identifier: about
    #  name: About
    #  url: about
    #  weight: 5
# Read: https://github.com/adityatelange/hugo-PaperMod/wiki/FAQs#using-hugos-syntax-highlighter-chroma
# pygmentsUseClasses: true
# markup:
#     highlight:
#         # anchorLineNos: true
#         codeFences: true
#         guessSyntax: true
#         lineNos: true
#         style: monokai
</code></pre><p>After we edited, we in our root folder to open a terminal and type <code>hugo server -D</code>, and then open our browser in search bar type <code>http://localhost:1313/</code>, then will see as the picture below.
<img loading="lazy" src="https://i.imgur.com/fzuEDoz.png" alt="its demo blog"  />
</p>
<h3 id="step-4-create-a-first-post">Step 4: Create a first post</h3>
<p>After that we need to create our first post, and we need to use a command as below.</p>
<p>Here we use Hugo to create a new Markdown file under in posts folder, so you can change your Markdown file name to fit as your article name, but this time we use &ldquo;hello_world.md&rdquo; for teaching.</p>
<pre tabindex="0"><code>hugo new posts/hello_world.md
</code></pre><p><img loading="lazy" src="https://i.imgur.com/JgnAVrI.png" alt="hugo new posts"  />
</p>
<p>Then we open our Visual Studio Code to edit our first post, when we open &ldquo;content/posts/hello_world.md&rdquo;. You will see your screen likes below.
<img loading="lazy" src="https://i.imgur.com/suv5MPR.png" alt="hello_world.md"  />
</p>
<p>We edited like below.</p>
<pre tabindex="0"><code>---
title: &#34;Hello_World!&#34;
date: 2022-01-06T14:00:09Z
draft: false
# weight: 1
# aliases: [&#34;/AirTag&#34;]
tags: [&#34;First post&#34;, &#34;Hello World&#34;]
author: &#34;Me&#34;
# author: [&#34;Me&#34;, &#34;You&#34;] # multiple authors
showToc: false
TocOpen: false
hidemeta: false
comments: true
#description: &#34;Hello World&#34;
#canonicalURL: &#34;https://canonical.url/to/page&#34;
disableHLJS: true # to disable highlightjs
disableShare: true
disableHLJS: false
hideSummary: false
searchHidden: false
ShowReadingTime: true
ShowBreadCrumbs: true
ShowPostNavLinks: true
#cover:
#    image: &#34;&lt;image path/url&gt;&#34; # image path/url
#    alt: &#34;&lt;alt text&gt;&#34; # alt text
#    caption: &#34;&lt;text&gt;&#34; # display caption under cover
#    relative: true # when using page bundles set this to true
#    hidden: true # only hide on current single page
#editPost:
#    URL: &#34;https://github.com/&lt;path_to_repo&gt;/content&#34;
#    Text: &#34;Suggest Changes&#34; # edit text
#    appendFilePath: false # to append file path to Edit link
---
# Hello World!!!

This is my first post!
</code></pre><h3 id="step-5-open-hugo-server">Step 5: Open Hugo server</h3>
<p>Hugo local preview function, we only need to in Windows PowerShell or Terminal and in the site folder root, in command line to type <code>hugo server -D</code>, and we can in local to preview our sites, the initial URL  is <code>http://localhost:1313/</code>.</p>
<p>Now our site will like below.
<img loading="lazy" src="https://i.imgur.com/lbjHm5O.png" alt="First Post"  />
</p>
<p><strong>For now we already created a demo blog and posted our first post, and then we need to deploy to GitHub Pages.</strong></p>
<h3 id="step-6-publish-hugo-blog-to-github">Step 6: Publish Hugo blog to GitHub</h3>
<p>First of all you have a GitHub account if you don&rsquo;t have yet, you can googling and sign up. We need to in GitHub to create a repository to store our site and named <code>&lt;username&gt;.github.io</code>, the username is your GitHub username.</p>
<p><strong>PS: Because it&rsquo;s a demo site, so the name is not following the rule.</strong>
<img loading="lazy" src="https://i.imgur.com/H22voyQ.png" alt="Create a new repository"  />
</p>
<p>And then we need to in our main repository to create a new branch <code>gh-pages</code>, this branch is for display our blog site, and later we will use GitHub Action function to do automated deploy to create files to <code>gh-pages</code>.</p>
<pre tabindex="0"><code># Add all of files
git add .
# Add commit message
git commit -m &#34;init its demo blog&#34;
# Add main branch
git branch -M main
# Add remote repo
git remote add origin https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git
# Upload site contents to remote repo
git push -u origin main

# Add gh-pages orphan branch
git checkout --orphan gh-pages
# Add a README.md
echo &#34;gh-pages&#34; &gt; &#34;README.md&#34;
# Add all of files
git add .
# Add commit message
git commit -m &#34;init gh-pages branch&#34;
# Upload site contents to remote repo
git push -u origin gh-pages
# Switch branch to main
git checkout main
</code></pre><p>Ran down all of above commands, your repository will have two branches <code>main</code> and <code>gh-pages</code>.</p>
<h3 id="step-7-setting-github-action-to-achieve-automated-deploy">Step 7: Setting GitHub Action to achieve automated deploy</h3>
<p>We need to in main branch has changed to trigger automation to deploy to gh-pages.</p>
<h4 id="preparations-1">Preparations</h4>
<p>First time to <a href="https://github.com/settings/tokens/new">This page</a> to claim ours Token for next steps, we selected options as the below picture.
<img loading="lazy" src="https://i.imgur.com/ELdM2bq.png" alt="New personal access token"  />
</p>
<p>Then to end of the page to press &ldquo;Generate Token&rdquo;, and copy the Token.
<img loading="lazy" src="https://i.imgur.com/sfTO3EW.png" alt="Generate Token"  />

<img loading="lazy" src="https://i.imgur.com/ZuYMGa1.png" alt="Personal access tokens"  />
</p>
<p>After, we need to store your Hugo blog&rsquo;s Token, the path: Repository &gt; Settings &gt; Secret &gt; New repository secret, like below picture, the Name you can named what you like, but the Value you have to set up as the Token we just got and press &ldquo;Add Secret&rdquo;.
<img loading="lazy" src="https://i.imgur.com/OVHpiZp.png" alt="New secret"  />
</p>
<p><strong>For now our preparation is done, then we have to set up our workflow.</strong></p>
<h4 id="workflow-settings">workflow settings</h4>
<p>We will follow this <a href="https://github.com/peaceiris/actions-hugo">Article</a>&rsquo;s workflow to set up GitHub Action.</p>
<p>First we go to GitHub Action page and click &ldquo;set up a workflow yourself -&gt;&rdquo;
<img loading="lazy" src="https://i.imgur.com/20ozHSn.png" alt="set up a workflow yourself"  />
</p>
<p>Copy and paste the below code and do some modifications.</p>
<pre tabindex="0"><code>name: Build GH-Pages #you can be named what you want

on:
  push:
    paths-ignore:
      - &#39;images/**&#39;
      - &#39;LICENSE&#39;
      - &#39;README.md&#39;
    branches:
      - main
  workflow_dispatch:
    # manual run

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Get Theme
        run: git submodule update --init --recursive

      - name: Update theme to Latest commit
        run: git submodule update --remote --merge

      - name: Setup hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: &#39;latest&#39;

      - name: Build
        run: hugo --buildDrafts --gc --verbose --minify

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.HUGO_DEPLOY_TOKEN }}
          publish_dir: ./public
          commit_message: ${{ github.event.head_commit.message }}
</code></pre><p>After modified, click the upper left angle button &ldquo;Star commit&rdquo; to store the workflow settings file, then you can go to your repository&rsquo;s &ldquo;Action&rdquo; page to see your process states. when the process state shows a green ticked, means deployed success.
<img loading="lazy" src="https://i.imgur.com/Cw58W5x.png" alt="workflow file"  />

<img loading="lazy" src="https://i.imgur.com/88styb1.png" alt="workflows"  />

<img loading="lazy" src="https://i.imgur.com/9dz2Awx.png" alt="workflows successed"  />
</p>
<h3 id="step-8-publish-blog-new-posts">Step 8: Publish blog new posts</h3>
<p>When you finish the previous steps, you need to go to the Repository &gt; Settings page to find &ldquo;Pages&rdquo; to change the &ldquo;Source&rdquo; branch to &ldquo;gh-pages&rdquo;, and you finish all of the steps.</p>
<p>After when you want to publish a new post, only do:</p>
<ol>
<li>Use Visual Studio Code to open your blog folder.</li>
<li>Create a new Markdown file at &ldquo;content/posts&rdquo; below and write your content.</li>
<li>Then use git to upload the entire project file to your corresponding repository.</li>
</ol>
<h2 id="finally">Finally</h2>
<p>It&rsquo;s my first public tutorial!
And I refer to lots of articles then finally I have this result, I hope this tutorial can help those who want to create their own blogs.</p>
<h2 id="references">References</h2>
<p><a href="https://andrewwu29.github.io/itsdemoblog/">This post demo Site</a></p>
<p><a href="https://github.com/AndrewWu29/itsdemoblog">This Git repo</a></p>
<p><a href="https://yurepo.tw/2021/03/%E5%A6%82%E4%BD%95%E5%B0%87hugo%E9%83%A8%E8%90%BD%E6%A0%BC%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%8A/">如何將Hugo部落格部署到Github上?</a></p>
<p><a href="https://lexcao.io/zh/posts/hello-world/">代码笔记</a></p>
<p><a href="https://code.visualstudio.com/">Visual Studio Code</a></p>
<p><a href="https://git-scm.com/">Git</a></p>
<p><a href="https://chocolatey.org/install#individual">Chocolatey</a></p>
<p><a href="https://adityatelange.github.io/hugo-PaperMod/">PaperMod Demo Site</a></p>
<p><a href="https://github.com/adityatelange/hugo-PaperMod">hugo-PaperMod</a></p>
<p><a href="https://ithelp.ithome.com.tw/articles/10235097">Hugo 貼身打造個人部落格</a></p>
<p><a href="https://frankccccc.github.io/blog/posts/move_blog/">Golden Hat</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
