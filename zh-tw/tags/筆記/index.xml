<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>筆記 on Andrew&#39;s Blog</title>
    <link>https://andrewu.page/zh-tw/tags/%E7%AD%86%E8%A8%98/</link>
    <description>Recent content in 筆記 on Andrew&#39;s Blog</description>
    <image>
      <title>Andrew&#39;s Blog</title>
      <url>https://andrewu.page/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://andrewu.page/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 15 Feb 2022 17:22:00 +0000</lastBuildDate><atom:link href="https://andrewu.page/zh-tw/tags/%E7%AD%86%E8%A8%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Markdown 筆記 基本語法使用</title>
      <link>https://andrewu.page/zh-tw/2022/02/markdown-%E7%AD%86%E8%A8%98-%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 15 Feb 2022 17:22:00 +0000</pubDate>
      
      <guid>https://andrewu.page/zh-tw/2022/02/markdown-%E7%AD%86%E8%A8%98-%E5%9F%BA%E6%9C%AC%E8%AA%9E%E6%B3%95%E4%BD%BF%E7%94%A8/</guid>
      <description>什麼是Markdown? Markdown是一種輕量級標記式語言，創始人為約翰·格魯伯。它允許人們使用易讀易寫的純文字格式編寫文件，然後轉換成有效的XHTML（或者HTML）文件。這種語言吸收了很多在電子郵件中已有的純文字標記的特性。
由於Markdown的輕量化、易讀易寫特性，並且對於圖片，圖表、數學式都有支援，目前許多網站都廣泛使用Markdown來撰寫說明文件或是用於論壇上發表訊息。如GitHub、Reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge、簡書等，甚至還能被用來撰寫電子書。
所以只要熟悉相關語法，Markdown可以讓您輕鬆快速地撰寫筆記、文章、說明文件等。
基本語法 標題 # 標題一 ## 標題二 ### 標題三 #### 標題四 ##### 標題五 ###### 標題六 效果
標題一 標題二 標題三 標題四 標題五 標題六 強調 粗體 **粗體前後各兩個星號** __粗體前後各兩個底線__ 效果
粗體前後各兩個星號
粗體前後各兩個底線
斜體 *斜體前後各一個星號* _斜體前後各一個星號_ 效果
斜體前後各一個星號
斜體前後各一個星號
粗斜體 ***粗體前後各三個星號*** ___粗體前後各三個底線___ 效果
粗體前後各三個星號
粗體前後各三個底線
文字段落 一個段落是由一個以上相連接的行句組成，而一個以上的空行則會切分出不同的段落。
第一段 第二段 清單 Markdown支援有序清單和無序清單。無序清單使用 * 、 + 或 - 作為清單標記，有序清單使用數字接著一個英文句點做為清單標記。
無序清單 * 紅 * 橙 * 黃 + 紅 + 橙 + 黃 - 紅 - 橙 - 黃 效果</description>
      <content:encoded><![CDATA[<h2 id="什麼是markdown">什麼是Markdown?</h2>
<p>Markdown是一種輕量級標記式語言，創始人為約翰·格魯伯。它允許人們使用易讀易寫的純文字格式編寫文件，然後轉換成有效的XHTML（或者HTML）文件。這種語言吸收了很多在電子郵件中已有的純文字標記的特性。</p>
<p>由於Markdown的輕量化、易讀易寫特性，並且對於圖片，圖表、數學式都有支援，目前許多網站都廣泛使用Markdown來撰寫說明文件或是用於論壇上發表訊息。如GitHub、Reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge、簡書等，甚至還能被用來撰寫電子書。</p>
<p>所以只要熟悉相關語法，Markdown可以讓您輕鬆快速地撰寫筆記、文章、說明文件等。</p>
<h2 id="基本語法">基本語法</h2>
<h3 id="標題">標題</h3>
<pre><code># 標題一
## 標題二
### 標題三
#### 標題四
##### 標題五
###### 標題六
</code></pre>
<p><strong>效果</strong></p>
<h1 id="標題一">標題一</h1>
<h2 id="標題二">標題二</h2>
<h3 id="標題三">標題三</h3>
<h4 id="標題四">標題四</h4>
<h5 id="標題五">標題五</h5>
<h6 id="標題六">標題六</h6>
<h3 id="強調">強調</h3>
<h4 id="粗體">粗體</h4>
<pre><code>**粗體前後各兩個星號**
__粗體前後各兩個底線__
</code></pre>
<p><strong>效果</strong></p>
<p><strong>粗體前後各兩個星號</strong></p>
<p><strong>粗體前後各兩個底線</strong></p>
<h4 id="斜體">斜體</h4>
<pre><code>*斜體前後各一個星號*
_斜體前後各一個星號_
</code></pre>
<p><strong>效果</strong></p>
<p><em>斜體前後各一個星號</em></p>
<p><em>斜體前後各一個星號</em></p>
<h4 id="粗斜體">粗斜體</h4>
<pre><code>***粗體前後各三個星號***
___粗體前後各三個底線___
</code></pre>
<p><strong>效果</strong></p>
<p><em><strong>粗體前後各三個星號</strong></em></p>
<p><em><strong>粗體前後各三個底線</strong></em></p>
<h3 id="文字段落">文字段落</h3>
<p>一個段落是由一個以上相連接的行句組成，而一個以上的空行則會切分出不同的段落。</p>
<pre><code>第一段

第二段
</code></pre>
<h3 id="清單">清單</h3>
<p>Markdown支援有序清單和無序清單。無序清單使用 * 、 + 或 - 作為清單標記，有序清單使用數字接著一個英文句點做為清單標記。</p>
<h4 id="無序清單">無序清單</h4>
<pre><code>* 紅
* 橙
* 黃

+ 紅
+ 橙
+ 黃

- 紅
- 橙
- 黃
</code></pre>
<p><strong>效果</strong></p>
<ul>
<li>紅</li>
<li>橙</li>
<li>黃</li>
</ul>
<ul>
<li>紅</li>
<li>橙</li>
<li>黃</li>
</ul>
<ul>
<li>紅</li>
<li>橙</li>
<li>黃</li>
</ul>
<h4 id="有序清單">有序清單</h4>
<pre><code>1. 紅
2. 橙
3. 黃
</code></pre>
<p><strong>效果</strong></p>
<ol>
<li>紅</li>
<li>橙</li>
<li>黃</li>
</ol>
<p>若要使用多層級清單，可在下一層級使用一個縮排或是兩個半形空白。</p>
<pre><code>- 紅
- 橙
- 黃
    - 粉紅色
    - 橙紅色
        - 橙黃色
</code></pre>
<p><strong>效果</strong></p>
<ul>
<li>紅</li>
<li>橙</li>
<li>黃
<ul>
<li>粉紅色</li>
<li>橙紅色
<ul>
<li>橙黃色</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="複選框">複選框</h3>
<p>用於待辦事項或確認項目，使用 * [] 符號放到項目開頭，中括號內有 x 代表被選取。</p>
<pre><code>* [x] 這是已確認項目
* [ ] 這是待確認項目
</code></pre>
<p><strong>效果</strong></p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 這是已確認項目</li>
<li><input disabled="" type="checkbox"> 這是待確認項目</li>
</ul>
<h3 id="分隔線">分隔線</h3>
<p>在一行內使用三個或以上的 <code>*</code>、<code>-</code>、<code>_</code> 來建立分隔線，符號內不可有其他東西，但可以在符號內插入空白。</p>
<pre><code>***
---
___

********
* * *
----------
- - -
</code></pre>
<p><strong>效果</strong></p>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<h2 id="進階語法">進階語法</h2>
<h3 id="連結">連結</h3>
<p>語法如下。</p>
<ol>
<li>一個中括號，放置連結文字</li>
<li>一個小括號，放置連結路徑或網址，一樣可使用雙引號來添加 prompt 文字</li>
</ol>
<pre tabindex="0"><code>[GitHub](https://andrewwu29.github.io &#34;My GitHub&#34;)
</code></pre><p><strong>效果</strong></p>
<p><a href="https://andrewwu29.github.io" title="My GitHub">GitHub</a></p>
<h3 id="圖片">圖片</h3>
<p>語法如下</p>
<ul>
<li>一個驚嘆號 ! 開頭</li>
<li>一對方括號，放置圖片的替代文字</li>
<li>一對括號，放置圖片的路徑或網址，另外還可選擇性的添加 prompt，當滑鼠停留在圖片上時，會自動顯示這段文字，並使用雙引號包住。</li>
</ul>
<p><strong>PS:路徑可使用絕對路徑或相對路徑</strong></p>
<pre><code>![Img](/path/image.jpg)
![Img](/path/image.jpg &quot;title&quot;)
</code></pre>
<p><strong>效果</strong></p>
<p>無提示符的。
<img loading="lazy" src="https://i.imgur.com/C40N0ds.jpg" alt="York Minster Pic"  />

有提示符的，當滑鼠停留在圖片上面時，會自動顯示提示符。
<img loading="lazy" src="https://i.imgur.com/C40N0ds.jpg" alt="York Minster Pic"  title="York Minster"  />
</p>
<h3 id="自動連結">自動連結</h3>
<p>Markdown支援比較簡短的自動連結形式來處理網址和電子郵件信箱，只要是用角括號包起來，Markdown就會自動把它轉成連結，連結的文字就和連結位置一樣，例如：</p>
<pre><code>&lt;https://andrewwu29.github.io&gt;
</code></pre>
<p><strong>效果</strong></p>
<p><a href="https://andrewwu29.github.io">https://andrewwu29.github.io</a></p>
<h3 id="表格">表格</h3>
<p>Markdown 表格有點囉嗦，排版上也不是很美觀，若非必要盡量不做大張表格，實際運用時不太親民。</p>
<ul>
<li>最外圍的豎線不一定需要。</li>
<li>靠左對齊的寫法是添加 : 在左側，如 :&mdash;，同理靠右對齊為在右側添加冒號 &mdash;:</li>
<li>置中對齊呈現的方式為在兩側都添加冒號 :&ndash;:。</li>
</ul>
<pre tabindex="0"><code>| Plugin | README |
| ------ | ------ |
| Dropbox | [plugins/dropbox/README.md][PlDb] |
| GitHub | [plugins/github/README.md][PlGh] |
| Google Drive | [plugins/googledrive/README.md][PlGd] |
| OneDrive | [plugins/onedrive/README.md][PlOd] |
| Medium | [plugins/medium/README.md][PlMe] |
| Google Analytics | [plugins/googleanalytics/README.md][PlGa] |
</code></pre><h3 id="程式碼">程式碼</h3>
<p>要標記一小段程式碼，可以使用反引號<code>`</code>包起來。但如果要在程式碼內插入反引號，可以使用兩個反引號來包。</p>
<pre><code>Use the `printf()` function.

``There is a literal backtick (`) here.``

A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
</code></pre>
<p><strong>效果</strong></p>
<p>Use the <code>printf()</code> function.</p>
<p><code>There is a literal backtick (`) here.</code></p>
<p>A single backtick in a code span: <code>`</code></p>
<p>A backtick-delimited string in a code span: <code>`foo`</code></p>
<h4 id="程式碼區塊">程式碼區塊</h4>
<p>要標記多行的程式碼，可以使用4個空白或1個tab縮排即可或是頭尾三個反引號。</p>
<pre><code>Here is an example of AppleScript:

    tell application &quot;Foo&quot;
        beep
    end tell

```
程式碼區塊
```
</code></pre>
<p><strong>效果</strong></p>
<p>Here is an example of AppleScript:</p>
<pre><code>tell application &quot;Foo&quot;
    beep
end tell
</code></pre>
<pre tabindex="0"><code>程式碼區塊
</code></pre><h3 id="跳脫字元">跳脫字元</h3>
<p>Markdown可以利用反斜線來插入一些在語法中有其他意義的符號。</p>
<p>Markdown支援在下面這些符號前面加上反斜線來幫助插入普通的符號：</p>
<table>
<thead>
<tr>
<th style="text-align:center">符號</th>
<th style="text-align:center">中文名稱</th>
<th style="text-align:center">英文名稱</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:center">反斜線</td>
<td style="text-align:center">backslash</td>
</tr>
<tr>
<td style="text-align:center">`</td>
<td style="text-align:center">反引號</td>
<td style="text-align:center">backtick</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">星號</td>
<td style="text-align:center">asterisk</td>
</tr>
<tr>
<td style="text-align:center">_</td>
<td style="text-align:center">底線</td>
<td style="text-align:center">underscore</td>
</tr>
<tr>
<td style="text-align:center">{}</td>
<td style="text-align:center">大括號</td>
<td style="text-align:center">curly braces</td>
</tr>
<tr>
<td style="text-align:center">[]</td>
<td style="text-align:center">方括號</td>
<td style="text-align:center">square brackets</td>
</tr>
<tr>
<td style="text-align:center">()</td>
<td style="text-align:center">括號</td>
<td style="text-align:center">parentheses</td>
</tr>
<tr>
<td style="text-align:center">#</td>
<td style="text-align:center">井字號</td>
<td style="text-align:center">hash mark</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">加號</td>
<td style="text-align:center">plus sign</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">減號</td>
<td style="text-align:center">minus sign (hyphen)</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:center">英文句點</td>
<td style="text-align:center">dot</td>
</tr>
<tr>
<td style="text-align:center">!</td>
<td style="text-align:center">驚嘆號</td>
<td style="text-align:center">exclamation mark</td>
</tr>
</tbody>
</table>
<h3 id="區塊引言">區塊引言</h3>
<p>Markdown使用email形式的區塊引言，在區塊引言的區塊每行的最前面加上<code>&gt;</code>：</p>
<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<p>Markdown也允許你只在整個段落的第一行最前面加上<code>&gt;</code>：</p>
<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
</blockquote>
<blockquote>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<p>區塊引言可以有階層（例如：引言內的引言），只要根據層數加上不同數量的<code>&gt;</code>：</p>
<blockquote>
<p>This is the first level of quoting.</p>
<blockquote>
<p>This is nested blockquote.</p>
<blockquote>
<p>Back to the first level.</p>
</blockquote>
</blockquote>
</blockquote>
<p>引言的區塊內也可以使用其他的Markdown語法，包括標題、清單、程式碼區塊等：</p>
<blockquote>
<h2 id="this-is-a-header">This is a header.</h2>
<ol>
<li>This is the first list item.</li>
<li>This is the second list item.</li>
</ol>
<p>Here&rsquo;s some example code:</p>
<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre>
</blockquote>
<h2 id="參考資料">參考資料</h2>
<p><a href="https://markdown.tw/">Markdown文件</a></p>
<p><a href="https://fakestandard.github.io/post/markdown/markdown-1-heymarkdown/">Markdown筆記神器</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>如何添加RSS feed到您的Hugo PaperMod主題?</title>
      <link>https://andrewu.page/zh-tw/2022/02/%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0rss-feed%E5%88%B0%E6%82%A8%E7%9A%84hugo-papermod%E4%B8%BB%E9%A1%8C/</link>
      <pubDate>Sun, 06 Feb 2022 12:52:00 +0000</pubDate>
      
      <guid>https://andrewu.page/zh-tw/2022/02/%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0rss-feed%E5%88%B0%E6%82%A8%E7%9A%84hugo-papermod%E4%B8%BB%E9%A1%8C/</guid>
      <description>Hugo是一個熱門的靜態網站產生工具，而PaperMod本身就內建了RSS 2.0模板。
什麼是RSS feed? RSS其實是「Really Simple Syndication」的簡稱，中文翻譯為簡易資訊據合，目的其實很簡單，主要提供一個標準化格式，將新聞、部落格、網站或是社交平台頻道的更新資訊彙整到一個頁面。
所以意思指，如果有支援RSS服務的話，可以讓那些追蹤者，可以更簡單的追蹤到您最新文章或資訊。
建立RSS feed到您的Hugo PaperMod主題，只要三步驟 步驟一: 確認config.yml檔案裡的output的清單有RSS 步驟二: 新增RSS feed圖示到您的網站 步驟三: 開啟所有文章內容支持產生RSS XML檔案 所以現在config.yml檔案裡應該要有以下的代碼::
params: ShowFullTextinRSS: true # Supports to show your whole contents in RSS, not just summary socialIcons: - name: rss # Shows an RSS feed icon on your site` url: &amp;#34;index.xml&amp;#34; # Your RSS feed url path outputs: home: - HTML - RSS # Supports your site output including RSS format - JSON 完成以上步驟後，現在您的Hugo PaperMod主題網站，已經可以支援RSS feed了。</description>
      <content:encoded><![CDATA[<p>Hugo是一個熱門的靜態網站產生工具，而PaperMod本身就內建了RSS 2.0模板。</p>
<h2 id="什麼是rss-feed">什麼是RSS feed?</h2>
<p>RSS其實是「Really Simple Syndication」的簡稱，中文翻譯為簡易資訊據合，目的其實很簡單，主要提供一個標準化格式，將新聞、部落格、網站或是社交平台頻道的更新資訊彙整到一個頁面。</p>
<p>所以意思指，如果有支援RSS服務的話，可以讓那些追蹤者，可以更簡單的追蹤到您最新文章或資訊。</p>
<h2 id="建立rss-feed到您的hugo-papermod主題只要三步驟">建立RSS feed到您的Hugo PaperMod主題，只要三步驟</h2>
<h3 id="步驟一-確認configyml檔案裡的output的清單有rss">步驟一: 確認<code>config.yml</code>檔案裡的<code>output</code>的清單有<code>RSS</code></h3>
<h3 id="步驟二-新增rss-feed圖示到您的網站">步驟二: 新增RSS feed圖示到您的網站</h3>
<h3 id="步驟三-開啟所有文章內容支持產生rss-xml檔案">步驟三: 開啟所有文章內容支持產生RSS XML檔案</h3>
<p>所以現在<code>config.yml</code>檔案裡應該要有以下的代碼::</p>
<pre tabindex="0"><code>params:
  ShowFullTextinRSS: true # Supports to show your whole contents in RSS, not just summary
  
  socialIcons:
    - name: rss # Shows an RSS feed icon on your site`
      url: &#34;index.xml&#34; # Your RSS feed url path

outputs:
    home:
        - HTML
        - RSS # Supports your site output including RSS format
        - JSON
</code></pre><p><strong>完成以上步驟後，現在您的Hugo PaperMod主題網站，已經可以支援RSS feed了。</strong></p>
<h2 id="參考資料">參考資料</h2>
<p><a href="https://link.medium.com/8MgjDu9vqnb">Setting up an RSS feed for a Hugo blog using the PaperMod Theme</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>如何整合Disqus到您的Hugo網站?</title>
      <link>https://andrewu.page/zh-tw/2022/02/%E5%A6%82%E4%BD%95%E6%95%B4%E5%90%88disqus%E5%88%B0%E6%82%A8%E7%9A%84hugo%E7%B6%B2%E7%AB%99/</link>
      <pubDate>Sat, 05 Feb 2022 16:44:00 +0000</pubDate>
      
      <guid>https://andrewu.page/zh-tw/2022/02/%E5%A6%82%E4%BD%95%E6%95%B4%E5%90%88disqus%E5%88%B0%E6%82%A8%E7%9A%84hugo%E7%B6%B2%E7%AB%99/</guid>
      <description>什麼是Disqus? 是互聯網最受歡迎的評論外掛程式，使出版者可輕鬆將他們的內容更加靈活，增加豐富多元的討論，並有效地審核評論和建立社群。
手把手教學，教您整合Disqus到您的Hugo網站 步驟一: 註冊Disqus 步驟二: 安裝Disqus 步驟三: 選擇&amp;quot;I want to install Disqus on my site.&amp;quot; 步驟四: 填寫表單資料 步驟五: 複製留言的模板，並建立disqus.html檔案在您的Hugo網站的檔案夾底下的layouts/partials，然後並貼上您獲得的留言模板 範本應該會長得跟下面的代碼一樣:
&amp;lt;div id=&amp;#34;disqus_thread&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page&amp;#39;s canonical URL variable this.</description>
      <content:encoded><![CDATA[<h2 id="什麼是disqus">什麼是Disqus?</h2>
<p>是互聯網最受歡迎的評論外掛程式，使出版者可輕鬆將他們的內容更加靈活，增加豐富多元的討論，並有效地審核評論和建立社群。</p>
<h2 id="手把手教學教您整合disqus到您的hugo網站">手把手教學，教您整合Disqus到您的Hugo網站</h2>
<h3 id="步驟一-註冊disqus">步驟一: 註冊Disqus</h3>
<h3 id="步驟二-安裝disqus">步驟二: 安裝Disqus</h3>
<h3 id="步驟三-選擇i-want-to-install-disqus-on-my-site">步驟三: 選擇&quot;I want to install Disqus on my site.&quot;</h3>
<h3 id="步驟四-填寫表單資料">步驟四: 填寫表單資料</h3>
<h3 id="步驟五-複製留言的模板並建立disqushtml檔案在您的hugo網站的檔案夾底下的layoutspartials然後並貼上您獲得的留言模板">步驟五: 複製留言的模板，並建立disqus.html檔案在您的Hugo網站的檔案夾底下的layouts/partials，然後並貼上您獲得的留言模板</h3>
<p>範本應該會長得跟下面的代碼一樣:</p>
<pre tabindex="0"><code>&lt;div id=&#34;disqus_thread&#34;&gt;&lt;/div&gt;
&lt;script&gt;
    /**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */
    /*
    var disqus_config = function () {
    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page&#39;s canonical URL variable
    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page&#39;s unique identifier variable
    };
    */
    (function() { // DON&#39;T EDIT BELOW THIS LINE
    // Don&#39;t ever inject Disqus on localhost--it creates unwanted
    // discussions from &#39;localhost:1313&#39; on your Disqus account...
    if (window.location.hostname == &#34;localhost&#34;)
        return;


    var d = document, s = d.createElement(&#39;script&#39;);
    s.src = &#39;https://your_disqus_name.disqus.com/embed.js&#39;;
    s.setAttribute(&#39;data-timestamp&#39;, +new Date());
    (d.head || d.body).appendChild(s);
    })();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&#34;https://disqus.com/?ref_noscript&#34;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
</code></pre><h3 id="步驟六-建立commentshtml檔案在您的hugo網站的檔案夾底下的layoutspartials然後複製並貼上以下代碼到這個檔案裡面">步驟六: 建立comments.html檔案在您的Hugo網站的檔案夾底下的layouts/partials，然後複製並貼上以下代碼到這個檔案裡面</h3>
<pre tabindex="0"><code>{{- /* Comments area start */ -}}
{{- /* partial &#34;disqus.html&#34; . */ -}}
{{ template &#34;_internal/disqus.html&#34; . }}
{{- /* to add comments read =&gt; https://gohugo.io/content-management/comments/ */ -}}
{{- /* Comments area end */ -}}
</code></pre><h3 id="步驟七-增加disqus簡稱disqusshortname--your-disqus-shortname到configyml檔案裡">步驟七: 增加Disqus簡稱<code>disqusShortname = &quot;&lt;your-disqus-shortname&gt;&quot;</code>到config.yml檔案裡</h3>
<h3 id="步驟八-恭喜-現在所有步驟都結束了您可以發布到您的github倉庫">步驟八: 恭喜! 現在所有步驟都結束了，您可以發布到您的GitHub倉庫</h3>
<h2 id="參考資料">參考資料</h2>
<p><a href="https://disqus.com">Disqus</a></p>
<p><a href="https://gohugo.io/templates/internal/">Internal Templates | Hugo</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>如何添加Google Analytics到Hugo?</title>
      <link>https://andrewu.page/zh-tw/2022/02/%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0google-analytics%E5%88%B0hugo/</link>
      <pubDate>Fri, 04 Feb 2022 14:25:00 +0000</pubDate>
      
      <guid>https://andrewu.page/zh-tw/2022/02/%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0google-analytics%E5%88%B0hugo/</guid>
      <description>什麼是Google Analytics? Google Analytics是一個網站分析服務，它提供統計和基本分析的工具，給搜尋引擎最佳化和行銷目的。這個服務是一部分Google行銷平台並免費提供給任何有Google帳號的用戶使用。
如何添加google analytics到Hugo網站? 步驟一: 建立一個google帳號 步驟二: 到google analytics網站 步驟三: 在google analytics設定好您要分析的網站資訊 步驟四: 取得您給google analytics分析的ID 步驟五: 編輯您Hugo的config.yml 添加 googleAnalytics: G-MEASUREMENT_ID 到您的config.yml檔案。
步驟六: 添加google analytics模板到您Hugo的主題 添加 {{ template &amp;quot;_internal/google_analytics.html&amp;quot; . }} 到您的主題底下的head.html檔案 &amp;lt;head&amp;gt; 區塊內
參考資料 DEFINITION Google Analytics
Google Analytics
Internal Templates | Hugo</description>
      <content:encoded><![CDATA[<h2 id="什麼是google-analytics">什麼是Google Analytics?</h2>
<p>Google Analytics是一個網站分析服務，它提供統計和基本分析的工具，給搜尋引擎最佳化和行銷目的。這個服務是一部分Google行銷平台並免費提供給任何有Google帳號的用戶使用。</p>
<h2 id="如何添加google-analytics到hugo網站">如何添加google analytics到Hugo網站?</h2>
<h3 id="步驟一-建立一個google帳號httpsaccountsgooglecomsignupv2webcreateaccountserviceanalyticscontinuehttps3a2f2fanalyticsgooglecom2fanalytics2fweb2fhlendshs9237899823a1643982945903281bizfalseflownameglifwebsigninflowentrysignupnogmtrue">步驟一: 建立一個<a href="https://accounts.google.com/signup/v2/webcreateaccount?service=analytics&amp;continue=https%3A%2F%2Fanalytics.google.com%2Fanalytics%2Fweb%2F&amp;hl=en&amp;dsh=S923789982%3A1643982945903281&amp;biz=false&amp;flowName=GlifWebSignIn&amp;flowEntry=SignUp&amp;nogm=true">google帳號</a></h3>
<h3 id="步驟二-到google-analyticshttpsanalyticsgooglecomanalyticswebprovisionprovision網站">步驟二: 到<a href="https://analytics.google.com/analytics/web/provision/#/provision">google analytics</a>網站</h3>
<h3 id="步驟三--在google-analytics設定好您要分析的網站資訊">步驟三:  在google analytics設定好您要分析的網站資訊</h3>
<h3 id="步驟四-取得您給google-analytics分析的id">步驟四: 取得您給google analytics分析的ID</h3>
<h3 id="步驟五-編輯您hugo的configyml">步驟五: 編輯您Hugo的config.yml</h3>
<p>添加 <code>googleAnalytics: G-MEASUREMENT_ID</code> 到您的config.yml檔案。</p>
<h3 id="步驟六-添加google-analytics模板到您hugo的主題">步驟六: 添加google analytics模板到您Hugo的主題</h3>
<p>添加 <code>{{ template &quot;_internal/google_analytics.html&quot; . }}</code> 到您的主題底下的head.html檔案 <code>&lt;head&gt;</code> 區塊內</p>
<h2 id="參考資料">參考資料</h2>
<p><a href="https://searchbusinessanalytics.techtarget.com/definition/Google-Analytics">DEFINITION Google Analytics</a></p>
<p><a href="https://analytics.google.com/analytics/web/provision/#/provision">Google Analytics</a></p>
<p><a href="https://gohugo.io/templates/internal/">Internal Templates | Hugo</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Git基本指令</title>
      <link>https://andrewu.page/zh-tw/2022/01/git%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Wed, 12 Jan 2022 15:30:00 +0000</pubDate>
      
      <guid>https://andrewu.page/zh-tw/2022/01/git%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/</guid>
      <description>確認Git是否安裝成功 git --version 設定Git使用者名稱跟信箱 git config --global user.name &amp;#34;Andrew_Wu&amp;#34; git config --global user.email &amp;#34;user@gmail.com&amp;#34; 確認輸入的資料是否正確 git config --list 獲取幫助 git help &amp;lt;command&amp;gt; 建立新的數據庫 git init 顯示當前數據庫狀態 git status 新增檔案到暫存區域 git add &amp;lt;filename&amp;gt; git add . #將工作目錄內所有檔案建立索引 建立新提交 git commit git commit -m &amp;#34;提交訊息&amp;#34; #-m means Message 顯示歷史日誌 git log #顯示歷史日誌的詳細資訊 git log --all --graph --decorate #以DAG方式顯示歷史日誌 查詢差異 git diff &amp;lt;filename&amp;gt; #顯示與上次提交時的差異 git diff &amp;lt;revision&amp;gt; &amp;lt;filename&amp;gt; #顯示某檔案與上次提交時的差異 分支 git checkout &amp;lt;revision&amp;gt; #更新HEAD與當前分支 git branch #顯示分支 git branch &amp;lt;name&amp;gt; #建立分支 git checkout -b &amp;lt;name&amp;gt; #建立分支並切換至該分支 同 git branch &amp;lt;name&amp;gt; ; git checkout &amp;lt;name&amp;gt; 合併 git merge &amp;lt;revision&amp;gt; #合併至當前分支 git mergetool #使用神奇工具處理合併衝突 git rebase #合併版本 git rebase -i HEAD~3 #修改歷史commit紀錄 遠端 git remote #列出遠端 git remote add &amp;lt;name&amp;gt; &amp;lt;url&amp;gt; #新增遠端 git push &amp;lt;remote&amp;gt; &amp;lt;local branch&amp;gt;:&amp;lt;remote branch&amp;gt; #將物件推送到遠端，並更新遠端參考 git branch --set-upstream-to=&amp;lt;remote&amp;gt;/&amp;lt;remote branch&amp;gt; #建立本地分支與遠端分支的關聯 git fetch #從遠端擷取物件/參考 git pull #更新本地端和遠端程式碼同步，同git fetch; git merge git clone #從遠端下載數據庫 回滾 git commit --amend #編輯提交的內容或資訊 git reset HEAD &amp;lt;file&amp;gt; #取消暫存檔案 git checkout -- &amp;lt;file&amp;gt; #回滾更改 進階 git clown --depth=1 #下載數據庫，但不下載歷史紀錄 git add -p #互動暫存 git blame #檢視最後修改某列的使用者 git stash #暫時移除工作目錄下的變更 git bisect #透過二分搜尋來搜尋歷史紀錄 .</description>
      <content:encoded><![CDATA[<h2 id="確認git是否安裝成功">確認Git是否安裝成功</h2>
<pre tabindex="0"><code>git --version
</code></pre><h2 id="設定git使用者名稱跟信箱">設定Git使用者名稱跟信箱</h2>
<pre tabindex="0"><code>git config --global user.name &#34;Andrew_Wu&#34;
git config --global user.email &#34;user@gmail.com&#34;
</code></pre><h3 id="確認輸入的資料是否正確">確認輸入的資料是否正確</h3>
<pre tabindex="0"><code>git config --list
</code></pre><h2 id="獲取幫助">獲取幫助</h2>
<pre tabindex="0"><code>git help &lt;command&gt;
</code></pre><h2 id="建立新的數據庫">建立新的數據庫</h2>
<pre tabindex="0"><code>git init
</code></pre><h2 id="顯示當前數據庫狀態">顯示當前數據庫狀態</h2>
<pre tabindex="0"><code>git status
</code></pre><h2 id="新增檔案到暫存區域">新增檔案到暫存區域</h2>
<pre tabindex="0"><code>git add &lt;filename&gt;
git add . #將工作目錄內所有檔案建立索引
</code></pre><h2 id="建立新提交">建立新提交</h2>
<pre tabindex="0"><code>git commit
git commit -m &#34;提交訊息&#34; #-m means Message
</code></pre><h2 id="顯示歷史日誌">顯示歷史日誌</h2>
<pre tabindex="0"><code>git log #顯示歷史日誌的詳細資訊
git log --all --graph --decorate #以DAG方式顯示歷史日誌
</code></pre><h2 id="查詢差異">查詢差異</h2>
<pre tabindex="0"><code>git diff &lt;filename&gt; #顯示與上次提交時的差異
git diff &lt;revision&gt; &lt;filename&gt; #顯示某檔案與上次提交時的差異
</code></pre><h2 id="分支">分支</h2>
<pre tabindex="0"><code>git checkout &lt;revision&gt; #更新HEAD與當前分支
git branch #顯示分支
git branch &lt;name&gt; #建立分支
git checkout -b &lt;name&gt; #建立分支並切換至該分支 同 git branch &lt;name&gt; ; git checkout &lt;name&gt;
</code></pre><h2 id="合併">合併</h2>
<pre tabindex="0"><code>git merge &lt;revision&gt; #合併至當前分支
git mergetool #使用神奇工具處理合併衝突
git rebase #合併版本
git rebase -i HEAD~3 #修改歷史commit紀錄
</code></pre><h2 id="遠端">遠端</h2>
<pre tabindex="0"><code>git remote #列出遠端
git remote add &lt;name&gt; &lt;url&gt; #新增遠端
git push &lt;remote&gt; &lt;local branch&gt;:&lt;remote branch&gt; #將物件推送到遠端，並更新遠端參考
git branch --set-upstream-to=&lt;remote&gt;/&lt;remote branch&gt; #建立本地分支與遠端分支的關聯
git fetch #從遠端擷取物件/參考
git pull #更新本地端和遠端程式碼同步，同git fetch; git merge
git clone #從遠端下載數據庫
</code></pre><h2 id="回滾">回滾</h2>
<pre tabindex="0"><code>git commit --amend #編輯提交的內容或資訊
git reset HEAD &lt;file&gt; #取消暫存檔案
git checkout -- &lt;file&gt; #回滾更改
</code></pre><h2 id="進階">進階</h2>
<pre tabindex="0"><code>git clown --depth=1 #下載數據庫，但不下載歷史紀錄
git add -p #互動暫存
git blame #檢視最後修改某列的使用者
git stash #暫時移除工作目錄下的變更
git bisect #透過二分搜尋來搜尋歷史紀錄
.gitignore #指定忽視且不會再追蹤的檔案
</code></pre><h2 id="參考資料">參考資料</h2>
<p><a href="https://missing-semester-zh-hant.github.io/2020/version-control/">版本控制</a></p>
<p><a href="https://blog.techbridge.cc/2018/01/17/learning-programming-and-coding-with-python-git-and-github-tutorial/">Git 與 Github 版本控制基本指令與操作入門教學</a></p>
<p><a href="https://www.maxlist.xyz/2020/05/10/git-tutorial/">Git教學 初心者懶人包 Git 入門</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>如何使用Hugo建立自己的部落格?</title>
      <link>https://andrewu.page/zh-tw/2022/01/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC/</link>
      <pubDate>Wed, 05 Jan 2022 17:13:00 +0000</pubDate>
      
      <guid>https://andrewu.page/zh-tw/2022/01/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8hugo%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC/</guid>
      <description>手把手教學，教您如何建立Hugo靜態部落格，並部屬到GitHub! 前言 最近一直有想要架設一個部落格的想法，之前也使用過很多部落格的服務，到最後也都不了了之，此次下定決心，要寫些東西，所以在Google後，發現了Hugo這個Framework，可單純使用Markdown，來架設一個靜態網站，反正我也沒有想要搞一個動態網站，來放我的想法跟筆記，所以對我來說這是個不錯的方案，又可以免費使用GitHub的服務當Host，然後可以付點錢，讓私有庫也可以顯示您的網站。
如果想要架設自己的部落格，又有預算考量，可以考慮使用Hugo來架設，自己的部落格。
事前準備 因為本人還沒有摳摳買Macbook(還在英國找工作中)，所以本篇教學會全用Windows進行撰寫。
首先我們需要Git這個來處理我們撰寫好的東西，並部屬到自己Git的公開庫，另外我們也需要一個軟體來輔助我們撰寫Markdown文件(例: Visual Studio Code 外加套件)。
Git安裝與確認 首先我們先到Git的官網下載 Git 到 Windows. Download for Windows，依照自己版本位元下載，下載後，滑鼠左鍵雙擊，並按下&amp;quot;Next&amp;quot;到&amp;quot;Install&amp;quot;即可無腦安裝完畢。 安裝完畢後，我們使用快捷鍵&amp;quot;Windows + S&amp;quot;，並輸入&amp;quot;CMD&amp;quot;，來開啟命令提示字元。 開啟後輸入以下指令。
git version 並會得到。
git version 2.xx.x.windows.x 當確認可以成功查詢安裝的版本號，即代表已成功安裝Git了。 再來我們需要安裝 Visual Studio Code 這是一個免費的IDE，另外我們需要另外安裝套件來處理Markdown。
Visual Studio Code &amp;amp; Markdown Plugin安裝 一樣我們到 Visual Studio Code 的官網下載安裝檔，並進行安裝，一樣&amp;quot;Next&amp;quot;到&amp;quot;Install&amp;quot;。 安裝完畢並開啟，應該會看到以下的畫面。 然後我們到&amp;quot;View&amp;quot;下的&amp;quot;Extensions&amp;quot;(也可用Ctrl+Shift+X)去搜尋&amp;quot;Markdown&amp;quot;的 Extensions，找到&amp;quot;markdownlint&amp;quot;並安裝。 到目前為止，我們已經成功安裝了Git &amp;amp; Visual Studio Code w/ markdownlint Extension。
接下來我們要繼續安裝 Hugo 和建立自己部落格的第一篇文章。
Hugo安裝與建立自己的部落格 在安裝Hugo前需要安裝chocolatey這個工具，這裡是直接使用&amp;quot;Individual&amp;quot;並透過開啟Administrative的PowerShell，並執行以下指令來安裝的。
Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.</description>
      <content:encoded><![CDATA[<h1 id="手把手教學教您如何建立hugo靜態部落格並部屬到github">手把手教學，教您如何建立Hugo靜態部落格，並部屬到GitHub!</h1>
<h2 id="前言">前言</h2>
<p>最近一直有想要架設一個部落格的想法，之前也使用過很多部落格的服務，到最後也都不了了之，此次下定決心，要寫些東西，所以在Google後，發現了Hugo這個Framework，可單純使用Markdown，來架設一個靜態網站，反正我也沒有想要搞一個動態網站，來放我的想法跟筆記，所以對我來說這是個不錯的方案，又可以免費使用GitHub的服務當Host，然後可以付點錢，讓私有庫也可以顯示您的網站。</p>
<p>如果想要架設自己的部落格，又有預算考量，可以考慮使用Hugo來架設，自己的部落格。</p>
<h2 id="事前準備">事前準備</h2>
<p>因為本人還沒有摳摳買Macbook(還在英國找工作中)，所以本篇教學會全用Windows進行撰寫。</p>
<p>首先我們需要Git這個來處理我們撰寫好的東西，並部屬到自己Git的公開庫，另外我們也需要一個軟體來輔助我們撰寫Markdown文件(例: Visual Studio Code 外加套件)。</p>
<h3 id="git安裝與確認">Git安裝與確認</h3>
<p>首先我們先到Git的官網下載 Git 到 Windows. <a href="https://git-scm.com/download/win">Download for Windows</a>，依照自己版本位元下載，下載後，滑鼠左鍵雙擊，並按下&quot;Next&quot;到&quot;Install&quot;即可無腦安裝完畢。
<img loading="lazy" src="https://i.imgur.com/xCCcS5k.png" alt="git dwonload for Windows"  />

<img loading="lazy" src="https://i.imgur.com/PTSyXhj.png" alt="git Setup"  />

安裝完畢後，我們使用快捷鍵&quot;Windows + S&quot;，並輸入&quot;CMD&quot;，來開啟命令提示字元。
<img loading="lazy" src="https://i.imgur.com/wjbN68m.png" alt="WinKey&#43;Shift&#43;CMD"  />

開啟後輸入以下指令。</p>
<pre tabindex="0"><code> git version
</code></pre><p>並會得到。</p>
<pre tabindex="0"><code>git version 2.xx.x.windows.x
</code></pre><p><img loading="lazy" src="https://i.imgur.com/kxjfjJw.png" alt="git version check"  />
</p>
<p>當確認可以成功查詢安裝的版本號，即代表已成功安裝Git了。
再來我們需要安裝 Visual Studio Code 這是一個免費的IDE，另外我們需要另外安裝套件來處理Markdown。</p>
<h3 id="visual-studio-code--markdown-plugin安裝">Visual Studio Code &amp; Markdown Plugin安裝</h3>
<p>一樣我們到 <a href="https://code.visualstudio.com/">Visual Studio Code</a> 的官網下載安裝檔，並進行安裝，一樣&quot;Next&quot;到&quot;Install&quot;。
<img loading="lazy" src="https://i.imgur.com/2isdgIM.png" alt="Visual Studio Code download"  />

<img loading="lazy" src="https://i.imgur.com/qcjQ9ex.png" alt="Visual Studio Code Setup Next"  />

<img loading="lazy" src="https://i.imgur.com/aEadDI2.png" alt="Visual Studio Code Setup Install"  />

安裝完畢並開啟，應該會看到以下的畫面。
<img loading="lazy" src="https://i.imgur.com/Ir3fuCX.png" alt="ms_VisualStudioCode_Get_Started"  />

然後我們到&quot;View&quot;下的&quot;Extensions&quot;(也可用Ctrl+Shift+X)去搜尋&quot;Markdown&quot;的 Extensions，找到&quot;markdownlint&quot;並安裝。
<img loading="lazy" src="https://i.imgur.com/cbg6cxa.png" alt="ms_VisualStudioCode_Get_Extensions"  />

<img loading="lazy" src="https://i.imgur.com/s3G9wGL.png" alt="ms_VisualStudioCode_Install_Markdown_Extension"  />
</p>
<p><strong>到目前為止，我們已經成功安裝了Git &amp; Visual Studio Code w/ markdownlint Extension。</strong></p>
<p>接下來我們要繼續安裝 Hugo 和建立自己部落格的第一篇文章。</p>
<h2 id="hugo安裝與建立自己的部落格">Hugo安裝與建立自己的部落格</h2>
<p>在安裝Hugo前需要安裝<a href="https://chocolatey.org/install#individual">chocolatey</a>這個工具，這裡是直接使用&quot;Individual&quot;並透過開啟Administrative的PowerShell，並執行以下指令來安裝的。</p>
<pre tabindex="0"><code>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://community.chocolatey.org/install.ps1&#39;))
</code></pre><p><strong>安裝完chocolatey這工具後，我們可以開始建立我們的部落格了。</strong></p>
<h3 id="第一步-安裝hugo">第一步: 安裝Hugo</h3>
<p>我們依照<a href="https://gohugo.io/getting-started/quick-start/">官方快速開始</a>進行安裝Hugo。因為我們這次只需要使用一般版本，所以依照手冊使用以下指令安裝。</p>
<pre tabindex="0"><code>choco install hugo -confirm
</code></pre><p>安裝完 Hugo 後，我們需要進行確認是否安裝成功，我們可以輸入以下指令。</p>
<pre tabindex="0"><code>hugo version
</code></pre><h3 id="第二步-建立新網站">第二步: 建立新網站</h3>
<p>接下來我們要建立我們的新網站，因為我們會使用到 <code>yml</code> 格式需使用到以下指令。</p>
<pre tabindex="0"><code>hugo new site &lt;資料夾名稱&gt; -f yml
</code></pre><p>出現以下畫面，即代表安裝成功了!
<img loading="lazy" src="https://i.imgur.com/U86gMSu.png" alt="Create a new site with yml format"  />
</p>
<h3 id="第三步-添加hugo主題">第三步: 添加Hugo主題</h3>
<p>完成 Hugo 網站建立後，我們要為 Hugo 添加一些主題，讓您的部落格，不會過於單調，可至 <a href="https://themes.gohugo.io/">Hugo Themes</a> 挑選您喜歡的主題，我這邊會使用 <a href="https://github.com/adityatelange/hugo-PaperMod">PaperMod</a> 這個主題作為示範。</p>
<p>首先我們要先切換到剛剛新增的資料夾目錄底下，我們可以在 CMD 輸入&quot;CD &lt;資料夾名稱&gt;&quot;，由於我們剛剛示範的資料夾名稱為&quot;its_demo_blog&quot;，所以我們要輸入以下指令。</p>
<pre tabindex="0"><code>cd &lt;您的資料夾名稱&gt;
</code></pre><p>再來我們需要先將這個資料夾，建立一個新的 Git 數據庫，我們要用到以下指令。</p>
<pre tabindex="0"><code>git init
</code></pre><p>然後您會看到此結果。
<img loading="lazy" src="https://i.imgur.com/BSdMrfg.png" alt="git init"  />
</p>
<p>接下來，我們需要將我們剛剛選好的主題，透過 Git 指令加入到我們的資料夾跟目錄底下的&quot;themes/PaperMod&quot;，指令為下。</p>
<pre tabindex="0"><code>git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod
</code></pre><p>執行完應該會顯示如下。
<img loading="lazy" src="https://i.imgur.com/uS0G58D.png" alt="git add submodule PaperMod"  />
</p>
<p>之後我們依照 PaperMod 的<a href="https://github.com/adityatelange/hugo-PaperMod/wiki/Installation">官方文件</a>，進行修改我們的<code>config.yml</code>。</p>
<pre tabindex="0"><code>baseURL: &#34;&lt;username.github.io&gt;&#34; #等等GitHub庫的網址
title: its demo blog #網站標題
paginate: 5
# 預設語系配置
defaultContentLanguage: zh-tw
# 主題配置
theme: PaperMod #這次使用到的主題 PaperMod

enableRobotsTXT: true
buildDrafts: false
buildFuture: false
buildExpired: false

# GooleAnalytics服務，這個之後會再寫到如何設定
googleAnalytics: UA-123-45


# 連結配置
permalinks:
  posts: /:year/:month/:title/

minify:
  disableXML: true
  minifyOutput: true

params:
  env: production # to enable google analytics, opengraph, twitter-cards and schema.
  title: its demo blog
  description: &#34;its demo blog description&#34;
  keywords: [Blog, Portfolio, PaperMod]
  author: Me
  # author: [&#34;Me&#34;, &#34;You&#34;] # multiple authors
  images: [&#34;&lt;link or path of image for opengraph, twitter-cards&gt;&#34;]
  DateFormat: &#34;January 2, 2006&#34;
  defaultTheme: auto # dark, light
  disableThemeToggle: false

  ShowReadingTime: true
  ShowShareButtons: true
  ShowPostNavLinks: true
  ShowBreadCrumbs: true
  ShowCodeCopyButtons: false
  disableSpecial1stPost: false
  disableScrollToTop: false
  comments: false
  hidemeta: false
  hideSummary: false
  showtoc: false
  tocopen: false

  assets:
    # disableHLJS: true # to disable highlight.js
    # disableFingerprinting: true
    favicon: &#34;&lt;link / abs url&gt;&#34;
    favicon16x16: &#34;&lt;link / abs url&gt;&#34;
    favicon32x32: &#34;&lt;link / abs url&gt;&#34;
    apple_touch_icon: &#34;&lt;link / abs url&gt;&#34;
    safari_pinned_tab: &#34;&lt;link / abs url&gt;&#34;

  label:
    text: &#34;its demo blog&#34;
    #icon: /apple-touch-icon.png
    iconHeight: 35

  # profile-mode
  profileMode:
    enabled: false # needs to be explicitly set
    title: ExampleSite
    subtitle: &#34;This is subtitle&#34;
    imageUrl: &#34;&lt;img location&gt;&#34;
    imageWidth: 120
    imageHeight: 120
    imageTitle: my image
    buttons:
      - name: Posts
        url: posts
      - name: Tags
        url: tags

  # home-info mode 這是教學使用 Home-info 模式，預設也為這個
  homeInfoParams:
    Title: &#34;嗨 大家 \U0001F44B&#34;
    Content: 歡迎來到我的部落格。

  # 可以放自己社交平台的連結
  socialIcons:
    - name: twitter
      url: &#34;https://twitter.com/&#34;
    - name: stackoverflow
      url: &#34;https://stackoverflow.com&#34;
    - name: github
      url: &#34;https://github.com/&#34;

  analytics:
    google:
      SiteVerificationTag: &#34;XYZabc&#34;
    bing:
      SiteVerificationTag: &#34;XYZabc&#34;
    yandex:
      SiteVerificationTag: &#34;XYZabc&#34;

  cover:
    hidden: true # hide everywhere but not in structured data
    hiddenInList: true # hide on list pages and home
    hiddenInSingle: true # hide on single page

  # 別人可以建議您修改，但我會將這個功能關閉
  #editPost:
    #URL: &#34;https://github.com/&lt;path_to_repo&gt;/content&#34;
    #Text: &#34;Suggest Changes&#34; # edit text
    #appendFilePath: true # to append file path to Edit link

  # for search
  # https://fusejs.io/api/options.html
  fuseOpts:
    isCaseSensitive: false
    shouldSort: true
    location: 0
    distance: 1000
    threshold: 0.4
    minMatchCharLength: 0
    keys: [&#34;title&#34;, &#34;permalink&#34;, &#34;summary&#34;, &#34;content&#34;]
menu:
  main:
    - identifier: posts
      name: 文章
      url: /posts/
      weight: 1
    - identifier: categories
      name: 分類
      url: /categories/
      weight: 2
    - identifier: tags
      name: 標籤
      url: /tags/
      weight: 3
    #- identifier: search
    #  name: 搜尋
    #  url: search
    #  weight: 4
    #- identifier: about
    #  name: 關於我
    #  url: about
    #  weight: 5
# Read: https://github.com/adityatelange/hugo-PaperMod/wiki/FAQs#using-hugos-syntax-highlighter-chroma
# pygmentsUseClasses: true
# markup:
#     highlight:
#         # anchorLineNos: true
#         codeFences: true
#         guessSyntax: true
#         lineNos: true
#         style: monokai
</code></pre><p>修改好後，我們在根目錄底下打開 CMD 並輸入<code>hugo server -D</code>，並打開瀏覽器應該會看到下圖畫面。
<img loading="lazy" src="https://i.imgur.com/fzuEDoz.png" alt="its demo blog"  />
</p>
<h3 id="第四步-建立第一篇文章">第四步: 建立第一篇文章</h3>
<p>再來我們要新建第一篇文章，我們需要用到以下指令，來建立第一篇文章，不免俗的當然要來一下 Hello World 啦!(老闆我會所有程式的Hello World? 這樣應徵比較有優勢嗎?)</p>
<pre tabindex="0"><code>hugo new posts/hello_world.md
</code></pre><p><img loading="lazy" src="https://i.imgur.com/JgnAVrI.png" alt="hugo new posts"  />
</p>
<p>然後我們打開之前下載的Visual Studio Code，來編寫我們的第一篇文章吧!但開始進入到&quot;content/posts/hello_world.md&quot;應該會看到這個畫面。
<img loading="lazy" src="https://i.imgur.com/suv5MPR.png" alt="hello_world.md"  />
</p>
<p>我們修改為下。</p>
<pre tabindex="0"><code>---
title: &#34;Hello_World!&#34;
date: 2022-01-06T14:00:09Z
draft: false
# weight: 1
# aliases: [&#34;/AirTag&#34;]
tags: [&#34;第一篇文章&#34;, &#34;Hello World&#34;]
author: &#34;Me&#34;
# author: [&#34;Me&#34;, &#34;You&#34;] # multiple authors
showToc: false
TocOpen: false
hidemeta: false
comments: true
#description: &#34;Hello World&#34;
#canonicalURL: &#34;https://canonical.url/to/page&#34;
disableHLJS: true # to disable highlightjs
disableShare: true
disableHLJS: false
hideSummary: false
searchHidden: false
ShowReadingTime: true
ShowBreadCrumbs: true
ShowPostNavLinks: true
#cover:
#    image: &#34;&lt;image path/url&gt;&#34; # image path/url
#    alt: &#34;&lt;alt text&gt;&#34; # alt text
#    caption: &#34;&lt;text&gt;&#34; # display caption under cover
#    relative: true # when using page bundles set this to true
#    hidden: true # only hide on current single page
#editPost:
#    URL: &#34;https://github.com/&lt;path_to_repo&gt;/content&#34;
#    Text: &#34;Suggest Changes&#34; # edit text
#    appendFilePath: false # to append file path to Edit link
---
# Hello World!!!

這是我的第一篇文章啦!
</code></pre><h3 id="第五步-開啟hugo伺服器">第五步: 開啟Hugo伺服器</h3>
<p>Hugo本地預覽網站功能，只需要在 Windows PowerShell 或 CMD 的部落格跟目錄底下打<code>hugo server -D</code>，即可在本地端預覽網站，初始網址:<code>http://localhost:1313/</code>。</p>
<p>目前的網頁應該會呈現如下。
<img loading="lazy" src="https://i.imgur.com/lbjHm5O.png" alt="First Post"  />
</p>
<p><strong>到目前步驟我們已經成功，建立出 Demo Blog 並發了第一篇文章，再來就是部屬到GitHub Pages了。</strong></p>
<h3 id="第六步-將hugo部落格部屬到github上">第六步: 將Hugo部落格部屬到GitHub上</h3>
<p>首先您需要有GitHub的帳號，沒有請左轉Google後申請。我們需要在GitHub建立一個存放網站用的庫，並命名為<code>&lt;username&gt;.github.io</code> username為您在GitHub上的使用者名稱。</p>
<p><strong>註: 因為這個是demo site所以名稱沒有按照上面規則走!</strong>
<img loading="lazy" src="https://i.imgur.com/H22voyQ.png" alt="Create a new repository"  />
</p>
<p>接下來我們需要在此庫底下建立另條分支<code>gh-pages</code>，這個分支是用來展示我們的部落格的，我們等下會使用到 GitHub Action的功能來進行內容自動化部屬，自動產生文件到<code>gh-pages</code>上。</p>
<pre tabindex="0"><code># 加入所有檔案
git add .
# 新增commit內容
git commit -m &#34;init its demo blog&#34;
# 新增main分支
git branch -M main
# 新增遠端版本庫
git remote add origin https://github.com/&lt;使用者名稱&gt;/&lt;使用者名稱&gt;.github.io.git
# 將部落格內容上傳到remote
git push -u origin main

# 新增gh-pages孤兒分支
git checkout --orphan gh-pages
# 新增一個README.md檔
echo &#34;gh-pages&#34; &gt; &#34;README.md&#34;
# 加入所有檔案
git add .
# 新增commit內容
git commit -m &#34;init gh-pages branch&#34;
# 將分支內容上傳到remote
git push -u origin gh-pages
# 切換到main分支
git checkout main
</code></pre><p>跑完以上指令後，您的庫應該會有兩個分支 <code>main</code> &amp; <code>gh-pages</code>。</p>
<h3 id="第七步-設定github-action來執行自動化部屬">第七步: 設定GitHub Action來執行自動化部屬</h3>
<p>我們需要在 main 分支上有做變更時，自動化部屬到 gh-pages。</p>
<h4 id="事前準備-1">事前準備</h4>
<p>我們要先到<a href="https://github.com/settings/tokens/new">此頁</a>，取得我們的Token，為了接下來的步驟。勾選的選項如下圖。
<img loading="lazy" src="https://i.imgur.com/ELdM2bq.png" alt="New personal access token"  />
</p>
<p>然後到頁面最下方，點選&quot;Generate Token&quot;，並將 Token 複製下來。
<img loading="lazy" src="https://i.imgur.com/sfTO3EW.png" alt="Generate Token"  />

<img loading="lazy" src="https://i.imgur.com/ZuYMGa1.png" alt="Personal access tokens"  />
</p>
<p>接下來，我們需要存放您 Hugo 部落格的 Token，路徑為: Repository &gt; Settings &gt; Secret &gt; New repository secret，如下圖，Name 可以取您喜歡的，Value 需要設定為我們剛取得的 Token，然後按下&quot;Add Secret&quot;。
<img loading="lazy" src="https://i.imgur.com/OVHpiZp.png" alt="New secret"  />
</p>
<p><strong>到這裡，目前的事前準備已告一段落，我們接下來要設定workflow。</strong></p>
<h4 id="workflow設定">workflow設定</h4>
<p>我們會參考<a href="https://github.com/peaceiris/actions-hugo">此文</a>的workflow，來設定 GitHub Action。</p>
<p>我們先來到 GitHub Action 頁面，並點選&quot;set up a workflow yourself -&gt;&quot;
<img loading="lazy" src="https://i.imgur.com/20ozHSn.png" alt="set up a workflow yourself"  />
</p>
<p>並將下方文件複製貼上，並做些修改。</p>
<pre tabindex="0"><code>name: Build GH-Pages #這個可以改為您想要的名稱

on:
  push:
    paths-ignore:
      - &#39;images/**&#39;
      - &#39;LICENSE&#39;
      - &#39;README.md&#39;
    branches:
      - main
  workflow_dispatch:
    # manual run

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Get Theme
        run: git submodule update --init --recursive

      - name: Update theme to Latest commit
        run: git submodule update --remote --merge

      - name: Setup hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: &#39;latest&#39;

      - name: Build
        run: hugo --buildDrafts --gc --verbose --minify

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.HUGO_DEPLOY_TOKEN }}
          publish_dir: ./public
          commit_message: ${{ github.event.head_commit.message }}
</code></pre><p>修改好後，點選右上角的&quot;Star commit&quot;儲存完 workflow的設定文件，就可以在庫底下的&quot;Action&quot;頁面看到執行的狀態了，若執行狀態前面顯示綠色打勾即代表部屬成功!
<img loading="lazy" src="https://i.imgur.com/Cw58W5x.png" alt="workflow file"  />

<img loading="lazy" src="https://i.imgur.com/88styb1.png" alt="workflows"  />

<img loading="lazy" src="https://i.imgur.com/9dz2Awx.png" alt="workflows successed"  />
</p>
<h3 id="第八步-發佈部落格新文章">第八步: 發佈部落格新文章</h3>
<p>當您完成前面的步驟後，您需要到 Repository &gt; Settings 底下的 Pages 將 Source 的分支改為 gh-pages 就完成了所有步驟了。</p>
<p>以後要發表新文章只需要做:</p>
<ol>
<li>使用Visual Studio Code打開部落格對應的資料夾。</li>
<li>在&quot;content/posts&quot;底下建立一個新 markdown 檔案，並撰寫您的內容。</li>
<li>再將整個專案檔案使用 git 上傳到您對應的庫。</li>
</ol>
<h2 id="結語">結語</h2>
<p>這算我的第一篇公開的筆記吧!也參考了網路上很多大大的文章，才有這個結果，希望可以清楚地幫助到想要自己建立部落格的人。</p>
<h2 id="參考資料">參考資料</h2>
<p><a href="https://andrewwu29.github.io/itsdemoblog/">此文Demo Site</a></p>
<p><a href="https://github.com/AndrewWu29/itsdemoblog">此文Git庫</a></p>
<p><a href="https://yurepo.tw/2021/03/%E5%A6%82%E4%BD%95%E5%B0%87hugo%E9%83%A8%E8%90%BD%E6%A0%BC%E9%83%A8%E7%BD%B2%E5%88%B0github%E4%B8%8A/">如何將Hugo部落格部署到Github上?</a></p>
<p><a href="https://lexcao.io/zh/posts/hello-world/">代码笔记</a></p>
<p><a href="https://code.visualstudio.com/">Visual Studio Code</a></p>
<p><a href="https://git-scm.com/">Git</a></p>
<p><a href="https://chocolatey.org/install#individual">Chocolatey</a></p>
<p><a href="https://adityatelange.github.io/hugo-PaperMod/">PaperMod Demo Site</a></p>
<p><a href="https://github.com/adityatelange/hugo-PaperMod">hugo-PaperMod</a></p>
<p><a href="https://ithelp.ithome.com.tw/articles/10235097">Hugo 貼身打造個人部落格</a></p>
<p><a href="https://frankccccc.github.io/blog/posts/move_blog/">Golden Hat</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
